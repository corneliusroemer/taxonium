{"version":3,"file":"node_modules_jbrowse_plugin-sequence_esm_GCContentAdapter_GCContentAdapter_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAkF;AACvB;AACE;AACA;AACpB;AAC1B,wBAAwB,2FAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2EAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA;AACA,wEAAwE;AACxE;AACA,kBAAkB,mCAAmC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,uDAAO;AAChD;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wEAAa;AAC/C,iCAAiC,QAAQ,GAAG,QAAQ;AACpD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-sequence/esm/GCContentAdapter/GCContentAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { toArray } from 'rxjs/operators';\nexport default class default_1 extends BaseFeatureDataAdapter {\n    constructor() {\n        super(...arguments);\n        this.windowSize = 1000;\n        this.windowDelta = 1000;\n        this.gcMode = 'content';\n    }\n    async configure() {\n        var _a;\n        // instantiate the sequence adapter\n        const sequenceAdapter = readConfObject(this.config, 'sequenceAdapter');\n        const dataAdapter = await ((_a = this.getSubAdapter) === null || _a === void 0 ? void 0 : _a.call(this, sequenceAdapter));\n        if (!dataAdapter) {\n            throw new Error('Error getting subadapter');\n        }\n        return dataAdapter.dataAdapter;\n    }\n    async getRefNames() {\n        const sequenceAdapter = await this.configure();\n        return sequenceAdapter.getRefNames();\n    }\n    /**\n     * Fetch features for a certain region\n     * @param param -\n     * @returns Observable of Feature objects in the region\n     */\n    getFeatures(query, opts) {\n        this.windowSize = 1000;\n        this.windowDelta = 1000;\n        this.gcMode = 'content';\n        return ObservableCreate(async (observer) => {\n            var _a;\n            const sequenceAdapter = await this.configure();\n            const hw = this.windowSize === 1 ? 1 : this.windowSize / 2; // Half the window size\n            const f = this.windowSize === 1;\n            let { start: queryStart, end: queryEnd } = query;\n            queryStart = Math.max(0, queryStart - hw);\n            queryEnd += hw;\n            if (queryEnd < 0 || queryStart > queryEnd) {\n                observer.complete();\n                return;\n            }\n            const ret = sequenceAdapter.getFeatures({\n                ...query,\n                start: queryStart,\n                end: queryEnd,\n            });\n            const feats = await ret.pipe(toArray()).toPromise();\n            const residues = ((_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq')) || '';\n            for (let i = hw; i < residues.length - hw; i += this.windowDelta) {\n                const r = f ? residues[i] : residues.slice(i - hw, i + hw);\n                let nc = 0;\n                let ng = 0;\n                let len = 0;\n                for (let j = 0; j < r.length; j++) {\n                    if (r[j] === 'c' || r[j] === 'C') {\n                        nc++;\n                    }\n                    else if (r[j] === 'g' || r[j] === 'G') {\n                        ng++;\n                    }\n                    if (r[j] !== 'N') {\n                        len++;\n                    }\n                }\n                const pos = queryStart;\n                let score;\n                if (this.gcMode === 'content') {\n                    score = (ng + nc) / (len || 1);\n                }\n                else if (this.gcMode === 'skew') {\n                    score = (ng - nc) / (ng + nc || 1);\n                }\n                observer.next(new SimpleFeature({\n                    uniqueId: `${this.id}_${pos + i}`,\n                    start: pos + i,\n                    end: pos + i + this.windowDelta,\n                    score,\n                }));\n            }\n            observer.complete();\n        });\n    }\n    /**\n     * called to provide a hint that data tied to a certain region\n     * will not be needed for the forseeable future and can be purged\n     * from caches, etc\n     */\n    freeResources( /* { region } */) { }\n}\ndefault_1.capabilities = ['hasLocalStats'];\n//# sourceMappingURL=GCContentAdapter.js.map"],"names":[],"sourceRoot":""}