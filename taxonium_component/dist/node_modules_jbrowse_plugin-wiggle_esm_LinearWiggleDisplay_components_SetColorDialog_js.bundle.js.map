{"version":3,"file":"node_modules_jbrowse_plugin-wiggle_esm_LinearWiggleDisplay_components_SetColorDialog_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACF;AACsG;AACjG;AACO;AACS;AAC3D,kBAAkB,yDAAU;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,0BAA0B,qBAAqB;AAC/C,YAAY,UAAU;AACtB,gCAAgC,+CAAQ;AACxC,YAAY,gDAAmB,CAAC,qDAAM,IAAI,kCAAkC;AAC5E,QAAQ,gDAAmB,CAAC,qDAAW;AACvC;AACA,YAAY,gDAAmB,CAAC,qDAAU,IAAI,6EAA6E;AAC3H,gBAAgB,gDAAmB,CAAC,iEAAS;AAC7C,QAAQ,gDAAmB,CAAC,qDAAa;AACzC,YAAY,gDAAmB,CAAC,qDAAgB,IAAI,4DAA4D,gDAAmB,CAAC,qDAAK,iCAAiC;AAC1K,YAAY,gDAAmB,CAAC,qDAAgB,IAAI,0DAA0D,gDAAmB,CAAC,qDAAK,2CAA2C;AAClL,sBAAsB,gDAAmB,CAAC,2CAAc;AACxD,gBAAgB,gDAAmB,CAAC,sDAAU;AAC9C,gBAAgB,gDAAmB,CAAC,qEAAW,IAAI;AACnD;AACA;AACA,uBAAuB;AACvB,gBAAgB,gDAAmB,CAAC,sDAAU;AAC9C,gBAAgB,gDAAmB,CAAC,qEAAW,IAAI;AACnD;AACA;AACA,uBAAuB,OAAO,gDAAmB,CAAC,2CAAc;AAChE,gBAAgB,gDAAmB,CAAC,sDAAU;AAC9C,gBAAgB,gDAAmB,CAAC,qEAAW,IAAI,yEAAyE;AAC5H,QAAQ,gDAAmB,CAAC,sDAAa;AACzC,YAAY,gDAAmB,CAAC,sDAAM,IAAI;AAC1C;AACA;AACA;AACA,iBAAiB,4CAA4C;AAC7D,YAAY,gDAAmB,CAAC,sDAAM,IAAI,sFAAsF;AAChI;AACA,+DAAe,qDAAQ,gBAAgB,EAAC;AACxC","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-wiggle/esm/LinearWiggleDisplay/components/SetColorDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Dialog, DialogContent, DialogActions, DialogTitle, FormControlLabel, IconButton, Radio, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { ColorPicker } from '@jbrowse/core/ui/ColorPicker';\nconst useStyles = makeStyles()(theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}));\nfunction SetColorDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [posneg, setPosNeg] = useState(false);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose },\n        React.createElement(DialogTitle, null,\n            \"Select either an overall color, or the positive/negative colors. Note that density renderers only work properly with positive/negative colors\",\n            React.createElement(IconButton, { \"aria-label\": \"close\", className: classes.closeButton, onClick: handleClose },\n                React.createElement(CloseIcon, null))),\n        React.createElement(DialogContent, null,\n            React.createElement(FormControlLabel, { checked: !posneg, onClick: () => setPosNeg(false), control: React.createElement(Radio, null), label: 'Overall color' }),\n            React.createElement(FormControlLabel, { checked: posneg, onClick: () => setPosNeg(true), control: React.createElement(Radio, null), label: 'Positive/negative color' }),\n            posneg ? (React.createElement(React.Fragment, null,\n                React.createElement(Typography, null, \"Positive color\"),\n                React.createElement(ColorPicker, { color: model.posColor || 'black', onChange: event => {\n                        model.setPosColor(event);\n                        model.setColor(undefined);\n                    } }),\n                React.createElement(Typography, null, \"Negative color\"),\n                React.createElement(ColorPicker, { color: model.negColor || 'black', onChange: event => {\n                        model.setNegColor(event);\n                        model.setColor(undefined);\n                    } }))) : (React.createElement(React.Fragment, null,\n                React.createElement(Typography, null, \"Overall color\"),\n                React.createElement(ColorPicker, { color: model.color || 'black', onChange: event => model.setColor(event) })))),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    model.setPosColor(undefined);\n                    model.setNegColor(undefined);\n                    model.setColor(undefined);\n                }, color: \"secondary\", variant: \"contained\" }, \"Restore default\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => handleClose() }, \"Submit\"))));\n}\nexport default observer(SetColorDialog);\n//# sourceMappingURL=SetColorDialog.js.map"],"names":[],"sourceRoot":""}