{"version":3,"file":"node_modules_jbrowse_plugin-sequence_esm_ChromSizesAdapter_ChromSizesAdapter_js.bundle.js","mappings":";;;;;;;;;;;;;;AAAuE;AAClB;AACrD,+DAAe,cAAc,gFAAW;AACxC;AACA;AACA,qBAAqB,mEAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC,CAAC;AACD","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-sequence/esm/ChromSizesAdapter/ChromSizesAdapter.js"],"sourcesContent":["import { BaseAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nexport default class extends BaseAdapter {\n    async setupPre() {\n        const pm = this.pluginManager;\n        const file = openLocation(this.getConf('chromSizesLocation'), pm);\n        const data = await file.readFile('utf8');\n        return Object.fromEntries(data\n            .split('\\n')\n            .map(f => f.trim())\n            .filter(f => !!f)\n            .map((line) => {\n            const [name, length] = line.split('\\t');\n            return [name, +length];\n        }));\n    }\n    async setup() {\n        if (!this.setupP) {\n            this.setupP = this.setupPre().catch(e => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async getRegions() {\n        const refSeqs = await this.setup();\n        return Object.keys(refSeqs).map(refName => ({\n            refName,\n            start: 0,\n            end: refSeqs[refName],\n        }));\n    }\n    getHeader() {\n        return {};\n    }\n    freeResources( /* { region } */) { }\n}\n//# sourceMappingURL=ChromSizesAdapter.js.map"],"names":[],"sourceRoot":""}