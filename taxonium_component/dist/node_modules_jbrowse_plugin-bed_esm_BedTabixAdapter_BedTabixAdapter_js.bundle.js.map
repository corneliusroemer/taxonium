{"version":3,"file":"node_modules_jbrowse_plugin-bed_esm_BedTabixAdapter_BedTabixAdapter_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA4B;AACsD;AAC7B;AACM;AACZ;AACT;AACvB,8BAA8B,2FAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAgB;AACvC,wBAAwB,mEAAY;AACpC,4CAA4C,mEAAY;AACxD,4CAA4C,mEAAY;AACxD;AACA,SAAS;AACT;AACA;AACA,0BAA0B,iDAAG,GAAG,SAAS;AACzC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,eAAe,yEAAgB;AAC/B;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAW,mEAAmE,QAAQ,GAAG,WAAW;AACtI,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;ACnEA;;;;;;;;;;ACAA","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-bed/esm/BedTabixAdapter/BedTabixAdapter.js","webpack://taxonium/ignored|/workspaces/taxonium/taxonium_web_client/node_modules/generic-filehandle/esm|./localFile","webpack://taxonium/ignored|/workspaces/taxonium/taxonium_web_client/node_modules/generic-filehandle/esm|file-uri-to-path"],"sourcesContent":["import BED from '@gmod/bed';\nimport { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { TabixIndexedFile } from '@gmod/tabix';\nimport { featureData } from '../util';\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const bedGzLoc = this.getConf('bedGzLocation');\n        const type = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const autoSql = this.getConf('autoSql');\n        const pm = this.pluginManager;\n        this.bed = new TabixIndexedFile({\n            filehandle: openLocation(bedGzLoc, pm),\n            csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n            tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n        this.columnNames = this.getConf('columnNames');\n        this.scoreColumn = this.getConf('scoreColumn');\n        this.parser = new BED({ autoSql });\n    }\n    async getRefNames(opts = {}) {\n        return this.bed.getReferenceSequenceNames(opts);\n    }\n    async getHeader() {\n        return this.bed.getHeader();\n    }\n    async getNames() {\n        if (this.columnNames.length) {\n            return this.columnNames;\n        }\n        const header = await this.bed.getHeader();\n        const defs = header.split('\\n').filter(f => !!f);\n        const defline = defs[defs.length - 1];\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(f => f.trim())\n            : undefined;\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const meta = await this.bed.getMetadata();\n            const { columnNumbers } = meta;\n            const colRef = columnNumbers.ref - 1;\n            const colStart = columnNumbers.start - 1;\n            const colEnd = columnNumbers.end - 1;\n            // colSame handles special case for tabix where a single column is both\n            // the start and end, this is assumed to be covering the base at this\n            // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n            const names = await this.getNames();\n            await this.bed.getLines(query.refName, query.start, query.end, {\n                lineCallback: (line, fileOffset) => {\n                    observer.next(featureData(line, colRef, colStart, colEnd, this.scoreColumn, this.parser, `${this.id}-${fileOffset}`, names));\n                },\n                signal: opts.signal,\n            });\n            observer.complete();\n        }, opts.signal);\n    }\n    freeResources() { }\n}\nBedTabixAdapter.capabilities = ['getFeatures', 'getRefNames'];\n//# sourceMappingURL=BedTabixAdapter.js.map","/* (ignored) */","/* (ignored) */"],"names":[],"sourceRoot":""}