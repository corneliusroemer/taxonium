{"version":3,"file":"node_modules_jbrowse_plugin-alignments_esm_AlignmentsFeatureDetail_AlignmentsFeatureDetail_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACwD;AACrD;AACL;AACU;AACX;AACsE;AACjD;AAC1D,kBAAkB,yDAAU;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB,CAAC,uFAAQ,IAAI,0BAA0B;AACtE,QAAQ,gDAAmB,CAAC,0FAAW,IAAI,4BAA4B;AACvE,QAAQ,gDAAmB,CAAC,qDAAS;AACrC;AACA,2BAA2B,KAAK,GAAG,IAAI;AACvC,oBAAoB,gDAAmB,CAAC,qDAAgB,IAAI,mBAAmB,gDAAmB,CAAC,qDAAQ,IAAI,+EAA+E,gBAAgB;AAC9M,SAAS;AACT;AACA,qBAAqB,OAAO;AAC5B,4BAA4B,+CAAQ;AACpC,gCAAgC,+CAAQ;AACxC;AACA;AACA,gBAAgB,gDAAmB,CAAC,2CAAc;AAClD,YAAY,gDAAmB,aAAa;AAC5C,oBAAoB,wDAAI;AACxB;AACA;AACA;AACA,qBAAqB;AACrB,mBAAmB;AACnB,YAAY,gDAAmB,aAAa,qDAAqD;AACjG,YAAY,gDAAmB,kCAAkC,sBAAsB;AACvF;AACA,WAAW,gDAAmB;AAC9B;AACA;AACA;AACA,qBAAqB,sEAAU;AAC/B;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,oBAAoB,8DAAU;AAC9B,YAAY,gDAAmB,CAAC,uFAAQ,IAAI,6CAA6C;AACzF,QAAQ,gDAAmB,CAAC,qDAAU;AACtC,QAAQ,gDAAmB;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM,GAAG,2BAA2B,GAAG,YAAY;AACpF;AACA;AACA,qCAAqC,MAAM,GAAG,aAAa,GAAG,YAAY,GAAG,SAAS;AACtF,oBAAoB,gDAAmB,SAAS,QAAQ,UAAU,GAAG,MAAM,GAAG;AAC9E,gBAAgB,gDAAmB,CAAC,sDAAI,IAAI;AAC5C;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA,qBAAqB,aAAa;AAClC,SAAS;AACT;AACA;AACA,oBAAoB,kBAAkB;AACtC,oBAAoB,8DAAU;AAC9B,YAAY,gDAAmB,CAAC,sDAAI,IAAI;AACxC,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA,SAAS,aAAa;AACtB;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA,YAAY,gDAAmB,CAAC,sDAAK,IAAI,wCAAwC;AACjF,QAAQ,gDAAmB,CAAC,6FAAc,IAAI;AAC9C,0DAA0D,gDAAmB,aAAa,gCAAgC,MAAM,gDAAmB,cAAc,cAAc;AAC/K,eAAe;AACf,aAAa,gDAAmB,4BAA4B,uBAAuB;AACnF,QAAQ,gDAAmB,mBAAmB,yBAAyB;AACvE;AACA,+DAAe,qDAAQ,yBAAyB,EAAC;AACjD","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/AlignmentsFeatureDetail.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Typography, Link, Paper, Checkbox, FormControlLabel, FormGroup, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\nimport { getSession } from '@jbrowse/core/util';\nimport copy from 'copy-to-clipboard';\nimport { FeatureDetails, BaseCard, SimpleValue, } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';\nimport { parseCigar } from '../BamAdapter/MismatchParser';\nconst useStyles = makeStyles()(() => ({\n    compact: {\n        paddingRight: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n}));\nconst omit = ['clipPos', 'flags'];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFlags(props) {\n    const { classes } = useStyles();\n    const { feature } = props;\n    const { flags } = feature;\n    const flagNames = [\n        'read paired',\n        'read mapped in proper pair',\n        'read unmapped',\n        'mate unmapped',\n        'read reverse strand',\n        'mate reverse strand',\n        'first in pair',\n        'second in pair',\n        'not primary alignment',\n        'read fails platform/vendor quality checks',\n        'read is PCR or optical duplicate',\n        'supplementary alignment',\n    ];\n    return (React.createElement(BaseCard, { ...props, title: \"Flags\" },\n        React.createElement(SimpleValue, { name: 'Flag', value: flags }),\n        React.createElement(FormGroup, null, flagNames.map((name, index) => {\n            const val = flags & (1 << index);\n            const key = `${name}_${val}`;\n            return (React.createElement(FormControlLabel, { key: key, control: React.createElement(Checkbox, { className: classes.compact, checked: Boolean(val), name: name, readOnly: true }), label: name }));\n        }))));\n}\nfunction Formatter({ value }) {\n    const [show, setShow] = useState(false);\n    const [copied, setCopied] = useState(false);\n    const display = String(value);\n    if (display.length > 100) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"button\", { type: \"button\", onClick: () => {\n                    copy(display);\n                    setCopied(true);\n                    setTimeout(() => {\n                        setCopied(false);\n                    }, 700);\n                } }, copied ? 'Copied to clipboard' : 'Copy'),\n            React.createElement(\"button\", { type: \"button\", onClick: () => setShow(val => !val) }, show ? 'Show less' : 'Show more'),\n            React.createElement(\"div\", null, show ? display : `${display.slice(0, 100)}...`)));\n    }\n    return React.createElement(\"div\", null, display);\n}\n// utility function to get length of alignment from cigar\nfunction getLengthOnRef(cigar) {\n    const cigarOps = parseCigar(cigar);\n    let lengthOnRef = 0;\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op !== 'H' && op !== 'S' && op !== 'I') {\n            lengthOnRef += len;\n        }\n    }\n    return lengthOnRef;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction SupplementaryAlignments(props) {\n    const { tag, model } = props;\n    const session = getSession(model);\n    return (React.createElement(BaseCard, { ...props, title: \"Supplementary alignments\" },\n        React.createElement(Typography, null, \"List of supplementary alignment locations\"),\n        React.createElement(\"ul\", null, tag\n            .split(';')\n            .filter(SA => !!SA)\n            .map((SA, index) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',');\n            const saLength = getLengthOnRef(saCigar);\n            const extra = Math.floor(saLength / 5);\n            const start = +saStart;\n            const end = +saStart + saLength;\n            const locString = `${saRef}:${Math.max(1, start - extra)}-${end + extra}`;\n            const displayStart = start.toLocaleString('en-US');\n            const displayEnd = end.toLocaleString('en-US');\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand})`;\n            return (React.createElement(\"li\", { key: `${locString}-${index}` },\n                React.createElement(Link, { onClick: event => {\n                        event.preventDefault();\n                        const { view } = model;\n                        try {\n                            if (view) {\n                                view.navToLocString(locString);\n                            }\n                            else {\n                                throw new Error('No view associated with this view anymore');\n                            }\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notify(`${e}`);\n                        }\n                    }, href: \"#\" }, displayString)));\n        }))));\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction PairLink({ locString, model }) {\n    const session = getSession(model);\n    return (React.createElement(Link, { onClick: () => {\n            const { view } = model;\n            try {\n                if (view) {\n                    view.navToLocString(locString);\n                }\n                else {\n                    session.notify('No view associated with this feature detail panel anymore', 'warning');\n                }\n            }\n            catch (e) {\n                console.error(e);\n                session.notify(`${e}`);\n            }\n        }, href: \"#\" }, locString));\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFeatureDetails(props) {\n    const { model } = props;\n    const feat = JSON.parse(JSON.stringify(model.featureData));\n    const SA = (feat.tags && feat.tags.SA) || feat.SA;\n    return (React.createElement(Paper, { \"data-testid\": \"alignment-side-drawer\" },\n        React.createElement(FeatureDetails, { ...props, omit: omit, feature: feat, formatter: (value, key) => {\n                return key === 'next_segment_position' ? (React.createElement(PairLink, { model: model, locString: value })) : (React.createElement(Formatter, { value: value }));\n            } }),\n        SA ? React.createElement(SupplementaryAlignments, { model: model, tag: SA }) : null,\n        React.createElement(AlignmentFlags, { feature: feat, ...props })));\n}\nexport default observer(AlignmentFeatureDetails);\n//# sourceMappingURL=AlignmentsFeatureDetail.js.map"],"names":[],"sourceRoot":""}