{"version":3,"file":"node_modules_jbrowse_plugin-alignments_esm_LinearPileupDisplay_components_FilterByTag_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACF;AACqG;AAChG;AACO;AAClD,kBAAkB,yDAAU;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC,YAAY,gDAAmB,CAAC,2CAAc;AAC9C,QAAQ,gDAAmB,CAAC,qDAAS,IAAI,8EAA8E;AACvH;AACA;AACA,2BAA2B,KAAK,GAAG,IAAI;AACvC,oBAAoB,gDAAmB,UAAU,UAAU;AAC3D,gBAAgB,gDAAmB,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,gBAAgB,gDAAmB,YAAY,cAAc;AAC7D,SAAS;AACT;AACA;AACA;AACA,YAAY,qBAAqB;AACjC,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,0CAA0C,+CAAQ;AAClD,0CAA0C,+CAAQ;AAClD,0BAA0B,+CAAQ;AAClC,oCAAoC,+CAAQ;AAC5C,oCAAoC,+CAAQ;AAC5C;AACA;AACA,YAAY,gDAAmB,CAAC,qDAAM,IAAI,kCAAkC;AAC5E,QAAQ,gDAAmB,CAAC,qDAAW;AACvC;AACA,YAAY,gDAAmB,CAAC,qDAAU,IAAI,6EAA6E;AAC3H,gBAAgB,gDAAmB,CAAC,iEAAS;AAC7C,QAAQ,gDAAmB,CAAC,qDAAa;AACzC,YAAY,gDAAmB,CAAC,qDAAU;AAC1C;AACA,gBAAgB,gDAAmB,CAAC,qDAAI,IAAI,YAAY;AACxD;AACA;AACA,YAAY,gDAAmB,CAAC,sDAAK,IAAI,+CAA+C;AACxF,gBAAgB,gDAAmB,UAAU,SAAS,mBAAmB;AACzE,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,CAAC,qDAAU;AACtD,wBAAwB,gDAAmB,YAAY,4CAA4C;AACnG,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,CAAC,qDAAU;AACtD,wBAAwB,gDAAmB,YAAY,4CAA4C;AACnG,YAAY,gDAAmB,CAAC,sDAAK,IAAI,+CAA+C;AACxF,gBAAgB,gDAAmB,CAAC,qDAAU;AAC9C,gBAAgB,gDAAmB,CAAC,qDAAS,IAAI;AACjD;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB,6IAA6I;AAClK,gBAAgB,gDAAmB,CAAC,qDAAS,IAAI;AACjD;AACA,qBAAqB;AACrB;AACA,qBAAqB,oCAAoC;AACzD,YAAY,gDAAmB,CAAC,sDAAK,IAAI,+CAA+C;AACxF,gBAAgB,gDAAmB,CAAC,qDAAU;AAC9C,gBAAgB,gDAAmB,CAAC,qDAAS,IAAI;AACjD;AACA,qBAAqB;AACrB;AACA,qBAAqB,uCAAuC;AAC5D,YAAY,gDAAmB,CAAC,sDAAa;AAC7C,gBAAgB,gDAAmB,CAAC,sDAAM,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,uBAAuB;AACvB,gBAAgB,gDAAmB,CAAC,sDAAM,IAAI,wEAAwE;AACtH;AACA,+DAAe,qDAAQ,gBAAgB,EAAC;AACxC","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/FilterByTag.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Link, Paper, TextField, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport CloseIcon from '@mui/icons-material/Close';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    field: {\n        margin: theme.spacing(2),\n    },\n}));\nconst flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n];\nfunction Bitmask(props) {\n    const { flag = 0, setFlag } = props;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(TextField, { type: \"number\", value: flag, onChange: event => setFlag(+event.target.value) }),\n        flagNames.map((name, index) => {\n            const val = flag & (1 << index);\n            const key = `${name}_${val}`;\n            return (React.createElement(\"div\", { key: key },\n                React.createElement(\"input\", { type: \"checkbox\", checked: Boolean(val), onChange: event => {\n                        if (event.target.checked) {\n                            setFlag(flag | (1 << index));\n                        }\n                        else {\n                            setFlag(flag & ~(1 << index));\n                        }\n                    } }),\n                React.createElement(\"label\", { htmlFor: key }, name)));\n        })));\n}\nfunction FilterByTagDlg(props) {\n    var _a, _b;\n    const { model, handleClose } = props;\n    const { classes } = useStyles();\n    const { filterBy } = model;\n    const [flagInclude, setFlagInclude] = useState(filterBy === null || filterBy === void 0 ? void 0 : filterBy.flagInclude);\n    const [flagExclude, setFlagExclude] = useState(filterBy === null || filterBy === void 0 ? void 0 : filterBy.flagExclude);\n    const [tag, setTag] = useState(((_a = filterBy === null || filterBy === void 0 ? void 0 : filterBy.tagFilter) === null || _a === void 0 ? void 0 : _a.tag) || '');\n    const [tagValue, setTagValue] = useState(((_b = filterBy === null || filterBy === void 0 ? void 0 : filterBy.tagFilter) === null || _b === void 0 ? void 0 : _b.value) || '');\n    const [readName, setReadName] = useState((filterBy === null || filterBy === void 0 ? void 0 : filterBy.readName) || '');\n    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);\n    const site = 'https://broadinstitute.github.io/picard/explain-flags.html';\n    return (React.createElement(Dialog, { open: true, onClose: handleClose },\n        React.createElement(DialogTitle, null,\n            \"Filter options\",\n            React.createElement(IconButton, { \"aria-label\": \"close\", className: classes.closeButton, onClick: handleClose },\n                React.createElement(CloseIcon, null))),\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null,\n                \"Set filter bitmask options. Refer to \",\n                React.createElement(Link, { href: site }, site),\n                ' ',\n                \"for details\"),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(\"div\", { style: { display: 'flex' } },\n                    React.createElement(\"div\", null,\n                        React.createElement(Typography, null, \"Read must have ALL these flags\"),\n                        React.createElement(Bitmask, { flag: flagInclude, setFlag: setFlagInclude })),\n                    React.createElement(\"div\", null,\n                        React.createElement(Typography, null, \"Read must have NONE of these flags\"),\n                        React.createElement(Bitmask, { flag: flagExclude, setFlag: setFlagExclude })))),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(Typography, null, \"Filter by tag name and value. Use * in the value field to get all reads containing any value for that tag. Example: filter tag name SA with value * to get all split/supplementary reads. Other examples include HP for haplotype, or RG for read group\"),\n                React.createElement(TextField, { className: classes.field, value: tag, onChange: event => {\n                        setTag(event.target.value);\n                    }, placeholder: \"Enter tag name\", inputProps: {\n                        maxLength: 2,\n                        'data-testid': 'color-tag-name-input',\n                    }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', \"data-testid\": \"color-tag-name\" }),\n                React.createElement(TextField, { className: classes.field, value: tagValue, onChange: event => {\n                        setTagValue(event.target.value);\n                    }, placeholder: \"Enter tag value\", inputProps: {\n                        'data-testid': 'color-tag-name-input',\n                    }, \"data-testid\": \"color-tag-value\" })),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(Typography, null, \"Filter by read name\"),\n                React.createElement(TextField, { className: classes.field, value: readName, onChange: event => {\n                        setReadName(event.target.value);\n                    }, placeholder: \"Enter read name\", inputProps: {\n                        'data-testid': 'color-tag-readname-input',\n                    }, \"data-testid\": \"color-tag-readname\" })),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", autoFocus: true, type: \"submit\", onClick: () => {\n                        model.setFilterBy({\n                            flagInclude,\n                            flagExclude,\n                            readName,\n                            tagFilter: tag !== ''\n                                ? {\n                                    tag,\n                                    value: tagValue,\n                                }\n                                : undefined,\n                        });\n                        handleClose();\n                    } }, \"Submit\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => handleClose() }, \"Cancel\")))));\n}\nexport default observer(FilterByTagDlg);\n//# sourceMappingURL=FilterByTag.js.map"],"names":[],"sourceRoot":""}