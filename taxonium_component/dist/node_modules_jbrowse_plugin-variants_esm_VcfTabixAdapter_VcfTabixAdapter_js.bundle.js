(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-variants_esm_VcfTabixAdapter_VcfTabixAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-variants/esm/VcfTabixAdapter/VcfTabixAdapter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-variants/esm/VcfTabixAdapter/VcfTabixAdapter.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jbrowse/core/util/io */ "./node_modules/@jbrowse/core/util/io/index.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jbrowse/core/util */ "./node_modules/@jbrowse/core/util/index.js");
/* harmony import */ var _jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jbrowse/core/util/rxjs */ "./node_modules/@jbrowse/core/util/rxjs.js");
/* harmony import */ var _gmod_tabix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gmod/tabix */ "./node_modules/@gmod/tabix/esm/index.js");
/* harmony import */ var _gmod_vcf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gmod/vcf */ "./node_modules/@gmod/vcf/esm/index.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jbrowse/core/configuration */ "./node_modules/@jbrowse/core/configuration/index.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _VcfFeature__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./VcfFeature */ "./node_modules/@jbrowse/plugin-variants/esm/VcfTabixAdapter/VcfFeature.js");








/* harmony default export */ __webpack_exports__["default"] = (class extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__.BaseFeatureDataAdapter {
    async configurePre() {
        const vcfGzLocation = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__.readConfObject)(this.config, 'vcfGzLocation');
        const location = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__.readConfObject)(this.config, ['index', 'location']);
        const indexType = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__.readConfObject)(this.config, ['index', 'indexType']);
        const filehandle = (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__.openLocation)(vcfGzLocation, this.pluginManager);
        const isCSI = indexType === 'CSI';
        const vcf = new _gmod_tabix__WEBPACK_IMPORTED_MODULE_4__.TabixIndexedFile({
            filehandle,
            csiFilehandle: isCSI
                ? (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__.openLocation)(location, this.pluginManager)
                : undefined,
            tbiFilehandle: !isCSI
                ? (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__.openLocation)(location, this.pluginManager)
                : undefined,
            chunkCacheSize: 50 * 2 ** 20,
            chunkSizeLimit: 1000000000,
        });
        const header = await vcf.getHeader();
        return {
            filehandle,
            vcf,
            parser: new _gmod_vcf__WEBPACK_IMPORTED_MODULE_5__["default"]({ header }),
        };
    }
    async configure() {
        if (!this.configured) {
            this.configured = this.configurePre().catch(e => {
                this.configured = undefined;
                throw e;
            });
        }
        return this.configured;
    }
    async getRefNames(opts = {}) {
        const { vcf } = await this.configure();
        return vcf.getReferenceSequenceNames(opts);
    }
    async getHeader() {
        const { vcf } = await this.configure();
        return vcf.getHeader();
    }
    async getMetadata() {
        const { parser } = await this.configure();
        return parser.getMetadata();
    }
    getFeatures(query, opts = {}) {
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__.ObservableCreate)(async (observer) => {
            const { refName, start, end } = query;
            const { vcf, parser } = await this.configure();
            await vcf.getLines(refName, start, end, {
                lineCallback: (line, fileOffset) => {
                    observer.next(new _VcfFeature__WEBPACK_IMPORTED_MODULE_7__["default"]({
                        variant: parser.parseLine(line),
                        parser,
                        id: `${this.id}-vcf-${fileOffset}`,
                    }));
                },
                ...opts,
            });
            observer.complete();
        }, opts.signal);
    }
    /**
     * Checks if the data source has data for the given reference sequence,
     * and then gets the features in the region if it does
     *
     * Currently this just calls getFeatureInRegion for each region. Adapters that
     * are frequently called on multiple regions simultaneously may want to
     * implement a more efficient custom version of this method.
     *
     * Also includes a bit of extra logging to warn when fetching a large portion
     * of a VCF
     * @param regions - Regions
     * @param opts - Feature adapter options
     * @returns Observable of Feature objects in the regions
     */
    getFeaturesInMultipleRegions(regions, opts = {}) {
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__.ObservableCreate)(async (observer) => {
            const { vcf } = await this.configure();
            // @ts-ignore
            const bytes = await (0,_jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__.bytesForRegions)(regions, vcf.index);
            const { filehandle } = await this.configure();
            const stat = await filehandle.stat();
            let pct = Math.round((bytes / stat.size) * 100);
            if (pct > 100) {
                // this is just a bad estimate, make 100% if it goes over
                pct = 100;
            }
            if (pct > 60) {
                console.warn(`getFeaturesInMultipleRegions fetching ${pct}% of VCF file, but whole-file streaming not yet implemented`);
            }
            super.getFeaturesInMultipleRegions(regions, opts).subscribe(observer);
        });
    }
    freeResources( /* { region } */) { }
});
//# sourceMappingURL=VcfTabixAdapter.js.map

/***/ }),

/***/ "?3899":
/*!*****************************!*\
  !*** ./localFile (ignored) ***!
  \*****************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?9a27":
/*!**********************************!*\
  !*** file-uri-to-path (ignored) ***!
  \**********************************/
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-variants_esm_VcfTabixAdapter_VcfTabixAdapter_js.bundle.js.map