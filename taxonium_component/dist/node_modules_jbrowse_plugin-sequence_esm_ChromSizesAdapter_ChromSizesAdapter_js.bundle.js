"use strict";
(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-sequence_esm_ChromSizesAdapter_ChromSizesAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-sequence/esm/ChromSizesAdapter/ChromSizesAdapter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-sequence/esm/ChromSizesAdapter/ChromSizesAdapter.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jbrowse/core/util/io */ "./node_modules/@jbrowse/core/util/io/index.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["default"] = (class extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__.BaseAdapter {
    async setupPre() {
        const pm = this.pluginManager;
        const file = (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_1__.openLocation)(this.getConf('chromSizesLocation'), pm);
        const data = await file.readFile('utf8');
        return Object.fromEntries(data
            .split('\n')
            .map(f => f.trim())
            .filter(f => !!f)
            .map((line) => {
            const [name, length] = line.split('\t');
            return [name, +length];
        }));
    }
    async setup() {
        if (!this.setupP) {
            this.setupP = this.setupPre().catch(e => {
                this.setupP = undefined;
                throw e;
            });
        }
        return this.setupP;
    }
    async getRegions() {
        const refSeqs = await this.setup();
        return Object.keys(refSeqs).map(refName => ({
            refName,
            start: 0,
            end: refSeqs[refName],
        }));
    }
    getHeader() {
        return {};
    }
    freeResources( /* { region } */) { }
});
//# sourceMappingURL=ChromSizesAdapter.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-sequence_esm_ChromSizesAdapter_ChromSizesAdapter_js.bundle.js.map