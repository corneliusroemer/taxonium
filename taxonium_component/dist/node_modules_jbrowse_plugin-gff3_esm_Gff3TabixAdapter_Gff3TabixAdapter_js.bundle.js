(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-gff3_esm_Gff3TabixAdapter_Gff3TabixAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-gff3/esm/Gff3TabixAdapter/Gff3TabixAdapter.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-gff3/esm/Gff3TabixAdapter/Gff3TabixAdapter.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jbrowse_core_util_range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jbrowse/core/util/range */ "./node_modules/@jbrowse/core/util/range.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jbrowse/core/util/io */ "./node_modules/@jbrowse/core/util/io/index.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jbrowse/core/util/rxjs */ "./node_modules/@jbrowse/core/util/rxjs.js");
/* harmony import */ var _jbrowse_core_util_simpleFeature__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jbrowse/core/util/simpleFeature */ "./node_modules/@jbrowse/core/util/simpleFeature.js");
/* harmony import */ var _gmod_tabix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gmod/tabix */ "./node_modules/@gmod/tabix/esm/index.js");
/* harmony import */ var _gmod_gff__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gmod/gff */ "./node_modules/@gmod/gff/esm/index.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jbrowse/core/configuration */ "./node_modules/@jbrowse/core/configuration/index.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__);
/* eslint-disable no-underscore-dangle */








/* harmony default export */ __webpack_exports__["default"] = (class extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__.BaseFeatureDataAdapter {
    constructor(config, getSubAdapter, pluginManager) {
        super(config, getSubAdapter, pluginManager);
        const gffGzLocation = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__.readConfObject)(config, 'gffGzLocation');
        const indexType = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__.readConfObject)(config, ['index', 'indexType']);
        const location = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__.readConfObject)(config, ['index', 'location']);
        const dontRedispatch = (0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_7__.readConfObject)(config, 'dontRedispatch');
        this.dontRedispatch = dontRedispatch || ['chromosome', 'contig', 'region'];
        this.gff = new _gmod_tabix__WEBPACK_IMPORTED_MODULE_5__.TabixIndexedFile({
            filehandle: (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__.openLocation)(gffGzLocation, this.pluginManager),
            csiFilehandle: indexType === 'CSI'
                ? (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__.openLocation)(location, this.pluginManager)
                : undefined,
            tbiFilehandle: indexType !== 'CSI'
                ? (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__.openLocation)(location, this.pluginManager)
                : undefined,
            chunkCacheSize: 50 * 2 ** 20,
            renameRefSeqs: (n) => n,
        });
    }
    async getRefNames(opts = {}) {
        return this.gff.getReferenceSequenceNames(opts);
    }
    async getHeader() {
        return this.gff.getHeader();
    }
    getFeatures(query, opts = {}) {
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__.ObservableCreate)(async (observer) => {
            const metadata = await this.gff.getMetadata();
            this.getFeaturesHelper(query, opts, metadata, observer, true);
        }, opts.signal);
    }
    async getFeaturesHelper(query, opts = {}, metadata, observer, allowRedispatch, originalQuery = query) {
        try {
            const lines = [];
            await this.gff.getLines(query.refName, query.start, query.end, (line, fileOffset) => {
                lines.push(this.parseLine(metadata.columnNumbers, line, fileOffset));
            });
            if (allowRedispatch && lines.length) {
                let minStart = Infinity;
                let maxEnd = -Infinity;
                lines.forEach(line => {
                    const featureType = line.fields[2];
                    // only expand redispatch range if feature is not a "dontRedispatch" type
                    // skips large regions like chromosome,region
                    if (!this.dontRedispatch.includes(featureType)) {
                        const start = line.start - 1; // gff is 1-based
                        if (start < minStart) {
                            minStart = start;
                        }
                        if (line.end > maxEnd) {
                            maxEnd = line.end;
                        }
                    }
                });
                if (maxEnd > query.end || minStart < query.start) {
                    // make a new feature callback to only return top-level features
                    // in the original query range
                    this.getFeaturesHelper({ ...query, start: minStart, end: maxEnd }, opts, metadata, observer, false, query);
                    return;
                }
            }
            const gff3 = lines
                .map((lineRecord) => {
                if (lineRecord.fields[8] && lineRecord.fields[8] !== '.') {
                    if (!lineRecord.fields[8].includes('_lineHash')) {
                        lineRecord.fields[8] += `;_lineHash=${lineRecord.lineHash}`;
                    }
                }
                else {
                    lineRecord.fields[8] = `_lineHash=${lineRecord.lineHash}`;
                }
                return lineRecord.fields.join('\t');
            })
                .join('\n');
            const features = _gmod_gff__WEBPACK_IMPORTED_MODULE_6__["default"].parseStringSync(gff3, {
                parseFeatures: true,
                parseComments: false,
                parseDirectives: false,
                parseSequences: false,
            });
            features.forEach(featureLocs => this.formatFeatures(featureLocs).forEach(f => {
                if ((0,_jbrowse_core_util_range__WEBPACK_IMPORTED_MODULE_1__.doesIntersect2)(f.get('start'), f.get('end'), originalQuery.start, originalQuery.end)) {
                    observer.next(f);
                }
            }));
            observer.complete();
        }
        catch (e) {
            observer.error(e);
        }
    }
    parseLine(columnNumbers, line, fileOffset) {
        const fields = line.split('\t');
        // note: index column numbers are 1-based
        return {
            start: +fields[columnNumbers.start - 1],
            end: +fields[columnNumbers.end - 1],
            lineHash: fileOffset,
            fields,
        };
    }
    formatFeatures(featureLocs) {
        return featureLocs.map(featureLoc => new _jbrowse_core_util_simpleFeature__WEBPACK_IMPORTED_MODULE_4__["default"]({
            data: this.featureData(featureLoc),
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            id: `${this.id}-offset-${featureLoc.attributes._lineHash[0]}`,
        }));
    }
    featureData(data) {
        const f = { ...data };
        f.start -= 1; // convert to interbase
        if (data.strand === '+') {
            f.strand = 1;
        }
        else if (data.strand === '-') {
            f.strand = -1;
        }
        else if (data.strand === '.') {
            f.strand = 0;
        }
        else {
            f.strand = undefined;
        }
        f.phase = Number(data.phase);
        f.refName = data.seq_id;
        if (data.score === null) {
            delete f.score;
        }
        if (data.phase === null) {
            delete f.score;
        }
        const defaultFields = [
            'start',
            'end',
            'seq_id',
            'score',
            'type',
            'source',
            'phase',
            'strand',
        ];
        const dataAttributes = data.attributes || {};
        Object.keys(dataAttributes).forEach(a => {
            let b = a.toLowerCase();
            if (defaultFields.includes(b)) {
                // add "suffix" to tag name if it already exists
                // reproduces behavior of NCList
                b += '2';
            }
            if (dataAttributes[a] !== null) {
                let attr = dataAttributes[a];
                if (Array.isArray(attr) && attr.length === 1) {
                    ;
                    [attr] = attr;
                }
                f[b] = attr;
            }
        });
        f.refName = f.seq_id;
        // the SimpleFeature constructor takes care of recursively inflating subfeatures
        if (data.child_features && data.child_features.length) {
            f.subfeatures = data.child_features
                .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))
                .flat();
        }
        delete f.child_features;
        delete f.data;
        delete f.derived_features;
        delete f._linehash;
        delete f.attributes;
        delete f.seq_id;
        return f;
    }
    freeResources( /* { region } */) { }
});
//# sourceMappingURL=Gff3TabixAdapter.js.map

/***/ }),

/***/ "?3899":
/*!*****************************!*\
  !*** ./localFile (ignored) ***!
  \*****************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?9a27":
/*!**********************************!*\
  !*** file-uri-to-path (ignored) ***!
  \**********************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?ed1b":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?d17e":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-gff3_esm_Gff3TabixAdapter_Gff3TabixAdapter_js.bundle.js.map