{"version":3,"file":"node_modules_jbrowse_plugin-data-management_esm_AddConnectionWidget_components_AddConnectionW-77e8d9.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACQ;AAC2C;AAChD;AACuB;AACzB;AACzC;AACwD;AACE;AAC1D,kBAAkB,yDAAU;AAC5B;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA,+BAA+B,OAAO;AACtC,gDAAgD,+CAAQ,GAAG;AAC3D,0CAA0C,+CAAQ,GAAG;AACrD,oDAAoD,+CAAQ;AAC5D,wCAAwC,+CAAQ;AAChD,YAAY,UAAU;AACtB,oBAAoB,8DAAU;AAC9B,YAAY,gBAAgB,EAAE,uDAAM;AACpC;AACA;AACA;AACA,6BAA6B,uBAAuB,GAAG,WAAW;AAClE,SAAS,EAAE,uDAAM;AACjB;AACA;AACA;AACA;AACA,wBAAwB,gDAAmB,CAAC,6DAAoB,IAAI,uJAAuJ;AAC3N;AACA,wBAAwB,gDAAmB,CAAC,4DAAmB,IAAI,wFAAwF;AAC3J;AACA,uBAAuB,gDAAmB,CAAC,qDAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB,UAAU,yBAAyB;AAClE,QAAQ,gDAAmB,CAAC,qDAAO,IAAI,6EAA6E,sBAAsB,gDAAmB,CAAC,qDAAI,IAAI,YAAY;AAClL,YAAY,gDAAmB,CAAC,qDAAS;AACzC,YAAY,gDAAmB,CAAC,sDAAW;AAC3C;AACA,gBAAgB,gDAAmB,UAAU,qCAAqC;AAClF,oBAAoB,gDAAmB,CAAC,sDAAM,IAAI,4EAA4E;AAC9H,oBAAoB,gDAAmB,CAAC,sDAAM,IAAI,2JAA2J;AAC7M;AACA;AACA,WAAW,8EAAyC;AACpD;AACA,+DAAe,qDAAQ,qBAAqB,EAAC;AAC7C;;;;;;;;;;;;;;ACrFwC;AACqB;AACvB;AACtC,4BAA4B,oDAAQ;AACpC,YAAY,uCAAuC;AACnD,0EAA0E,uEAAmB;AAC7F,YAAY,gDAAmB,CAAC,2CAAQ,IAAI,UAAU,gDAAmB,6BAA6B;AACtG,QAAQ,gDAAmB,0BAA0B,SAAS,eAAe,gCAAgC;AAC7G,CAAC;AACD,+DAAe,mBAAmB,EAAC;AACnC;;;;;;;;;;;;;;;;ACVyC;AACuB;AACN;AAC1D;AACA,YAAY,2DAA2D;AACvE,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB,WAAW,qBAAqB;AAC/D,QAAQ,gDAAmB,CAAC,qDAAS,IAAI,+FAA+F,gDAAmB,CAAC,2CAAc;AAC1K;AACA,sCAAsC,gDAAmB,CAAC,qDAAU,IAAI,4FAA4F;AACpK,oBAAoB,gDAAmB,CAAC,qEAAa,uGAAuG,uDAAuD,gDAAmB,CAAC,qDAAQ,IAAI,kEAAkE;AACrT;AACA,+DAAe,oBAAoB,EAAC;AACpC;;;;;;;;;;ACvBa;;AAEb,6BAA6B,mBAAO,CAAC,qJAA8C;;AAEnF,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF,kBAAe;;AAEf,4CAA4C,mBAAO,CAAC,wFAAuB;;AAE3E,kBAAkB,mBAAO,CAAC,8DAAmB;;AAE7C;AACA;AACA,CAAC;;AAED,kBAAe","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/AddConnectionWidget.js","webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConfigureConnection.js","webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConnectionTypeSelect.js","webpack://taxonium/./node_modules/@mui/icons-material/OpenInNew.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { getSession } from '@jbrowse/core/util';\nimport { Button, Step, StepContent, StepLabel, Stepper, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react';\nimport { getEnv } from 'mobx-state-tree';\n// locals\nimport ConfigureConnection from './ConfigureConnection';\nimport ConnectionTypeSelect from './ConnectionTypeSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nconst steps = ['Select a Connection Type', 'Configure Connection'];\nfunction AddConnectionWidget({ model }) {\n    const [connectionType, setConnectionType] = useState({});\n    const [configModel, setConfigModel] = useState({});\n    const [configModelReady, setConfigModelReady] = useState(true);\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    function handleSetConnectionType(newConnectionType) {\n        setConnectionType(newConnectionType);\n        setConfigModel(newConnectionType.configSchema.create({\n            connectionId: `${newConnectionType.name}-${Date.now()}`,\n        }, getEnv(model)));\n    }\n    function stepContent() {\n        switch (activeStep) {\n            case 0:\n                return (React.createElement(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getElementTypesInGroup('connection'), connectionType: connectionType, setConnectionType: handleSetConnectionType }));\n            case 1:\n                return (React.createElement(ConfigureConnection, { connectionType: connectionType, model: configModel, setModelReady: setConfigModelReady }));\n            default:\n                return React.createElement(Typography, null, \"Unknown step\");\n        }\n    }\n    function handleNext() {\n        if (activeStep === steps.length - 1) {\n            handleFinish();\n        }\n        else {\n            setActiveStep(activeStep + 1);\n        }\n    }\n    function handleBack() {\n        setActiveStep(activeStep - 1);\n    }\n    function handleFinish() {\n        const connectionConf = session.addConnectionConf(configModel);\n        session.makeConnection(connectionConf);\n        session.hideWidget(model);\n    }\n    function checkNextEnabled() {\n        if ((activeStep === 0 && connectionType.name) ||\n            (activeStep === 1 && configModel && configModelReady)) {\n            return true;\n        }\n        return false;\n    }\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\" }, steps.map(label => (React.createElement(Step, { key: label },\n            React.createElement(StepLabel, null, label),\n            React.createElement(StepContent, null,\n                stepContent(),\n                React.createElement(\"div\", { className: classes.actionsContainer },\n                    React.createElement(Button, { disabled: activeStep === 0, onClick: handleBack, className: classes.button }, \"Back\"),\n                    React.createElement(Button, { disabled: !checkNextEnabled(), variant: \"contained\", color: \"primary\", onClick: handleNext, className: classes.button, \"data-testid\": \"addConnectionNext\" }, activeStep === steps.length - 1 ? 'Connect' : 'Next')))))))));\n}\nAddConnectionWidget.propTypes = {\n    model: MobxPropTypes.observableObject.isRequired,\n};\nexport default observer(AddConnectionWidget);\n//# sourceMappingURL=AddConnectionWidget.js.map","import React, { Suspense } from 'react';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { observer } from 'mobx-react';\nconst ConfigureConnection = observer(props => {\n    const { connectionType, model, setModelReady } = props;\n    const ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;\n    return (React.createElement(Suspense, { fallback: React.createElement(\"div\", null, \"Loading...\") },\n        React.createElement(ConfigEditorComponent, { model: { target: model }, setModelReady: setModelReady })));\n});\nexport default ConfigureConnection;\n//# sourceMappingURL=ConfigureConnection.js.map","import React, { useEffect } from 'react';\nimport { IconButton, MenuItem, TextField } from '@mui/material';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nfunction ConnectionTypeSelect(props) {\n    const { connectionTypeChoices, connectionType, setConnectionType } = props;\n    useEffect(() => {\n        if (!connectionType.name) {\n            setConnectionType(connectionTypeChoices[0]);\n        }\n    });\n    function handleChange(event) {\n        setConnectionType(connectionTypeChoices.find((connectionTypeChoice) => connectionTypeChoice.name === event.target.value));\n    }\n    if (!connectionType.name) {\n        return null;\n    }\n    return (React.createElement(\"form\", { autoComplete: \"off\" },\n        React.createElement(TextField, { value: connectionType.name, label: \"connectionType\", helperText: connectionType.description ? (React.createElement(React.Fragment, null,\n                connectionType.description,\n                connectionType.url ? (React.createElement(IconButton, { href: connectionType.url, rel: \"noopener noreferrer\", target: \"_blank\", color: \"secondary\" },\n                    React.createElement(OpenInNewIcon, null))) : null)) : null, select: true, fullWidth: true, onChange: handleChange, variant: \"outlined\" }, connectionTypeChoices.map((connectionTypeChoice) => (React.createElement(MenuItem, { key: connectionTypeChoice.name, value: connectionTypeChoice.name }, connectionTypeChoice.displayName || connectionTypeChoice.name))))));\n}\nexport default ConnectionTypeSelect;\n//# sourceMappingURL=ConnectionTypeSelect.js.map","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"\n}), 'OpenInNew');\n\nexports.default = _default;"],"names":[],"sourceRoot":""}