(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-bed_esm_BedAdapter_BedAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-bed/esm/BedAdapter/BedAdapter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-bed/esm/BedAdapter/BedAdapter.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ BedAdapter; }
/* harmony export */ });
/* harmony import */ var _gmod_bed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gmod/bed */ "./node_modules/@gmod/bed/esm/index.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jbrowse/core/util/io */ "./node_modules/@jbrowse/core/util/io/index.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jbrowse/core/util/rxjs */ "./node_modules/@jbrowse/core/util/rxjs.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@jbrowse/plugin-bed/esm/util.js");
/* harmony import */ var _flatten_js_interval_tree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @flatten-js/interval-tree */ "./node_modules/@flatten-js/interval-tree/dist/main.esm.js");
/* harmony import */ var _gmod_bgzf_filehandle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gmod/bgzf-filehandle */ "./node_modules/@gmod/bgzf-filehandle/esm/index.js");







function isGzip(buf) {
    return buf[0] === 31 && buf[1] === 139 && buf[2] === 8;
}
class BedAdapter extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_1__.BaseFeatureDataAdapter {
    constructor() {
        super(...arguments);
        this.intervalTrees = {};
    }
    async loadDataP(opts = {}) {
        const pm = this.pluginManager;
        const bedLoc = this.getConf('bedLocation');
        const buf = await (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_2__.openLocation)(bedLoc, pm).readFile(opts);
        const buffer = isGzip(buf) ? await (0,_gmod_bgzf_filehandle__WEBPACK_IMPORTED_MODULE_6__.unzip)(buf) : buf;
        // 512MB  max chrome string length is 512MB
        if (buffer.length > 536870888) {
            throw new Error('Data exceeds maximum string length (512MB)');
        }
        const data = new TextDecoder('utf8', { fatal: true }).decode(buffer);
        const lines = data.split('\n').filter(f => !!f);
        const headerLines = [];
        let i = 0;
        for (; i < lines.length && lines[i].startsWith('#'); i++) {
            headerLines.push(lines[i]);
        }
        const header = headerLines.join('\n');
        const features = {};
        for (; i < lines.length; i++) {
            const line = lines[i];
            const tab = line.indexOf('\t');
            const refName = line.slice(0, tab);
            if (!features[refName]) {
                features[refName] = [];
            }
            features[refName].push(line);
        }
        const autoSql = this.getConf('autoSql');
        const parser = new _gmod_bed__WEBPACK_IMPORTED_MODULE_0__["default"]({ autoSql });
        const columnNames = this.getConf('columnNames');
        const scoreColumn = this.getConf('scoreColumn');
        const colRef = this.getConf('colRef');
        const colStart = this.getConf('colStart');
        const colEnd = this.getConf('colEnd');
        return {
            header,
            features,
            parser,
            columnNames,
            scoreColumn,
            colRef,
            colStart,
            colEnd,
        };
    }
    async loadData(opts = {}) {
        if (!this.bedFeatures) {
            this.bedFeatures = this.loadDataP(opts).catch(e => {
                this.bedFeatures = undefined;
                throw e;
            });
        }
        return this.bedFeatures;
    }
    async getRefNames(opts = {}) {
        const { features } = await this.loadData(opts);
        return Object.keys(features);
    }
    async getHeader(opts = {}) {
        const { header } = await this.loadData(opts);
        return header;
    }
    async getNames() {
        const { header, columnNames } = await this.loadData();
        if (columnNames.length) {
            return columnNames;
        }
        const defs = header.split('\n').filter(f => !!f);
        const defline = defs[defs.length - 1];
        return (defline === null || defline === void 0 ? void 0 : defline.includes('\t'))
            ? defline
                .slice(1)
                .split('\t')
                .map(field => field.trim())
            : undefined;
    }
    async loadFeatureIntervalTreeHelper(refName) {
        const { colRef, colStart, colEnd, features, parser, scoreColumn } = await this.loadData();
        const lines = features[refName];
        if (!lines) {
            return undefined;
        }
        const names = await this.getNames();
        const intervalTree = new _flatten_js_interval_tree__WEBPACK_IMPORTED_MODULE_5__["default"]();
        const ret = lines.map((f, i) => {
            const uniqueId = `${this.id}-${refName}-${i}`;
            return (0,_util__WEBPACK_IMPORTED_MODULE_4__.featureData)(f, colRef, colStart, colEnd, scoreColumn, parser, uniqueId, names);
        });
        for (let i = 0; i < ret.length; i++) {
            const obj = ret[i];
            intervalTree.insert([obj.get('start'), obj.get('end')], obj);
        }
        return intervalTree;
    }
    async loadFeatureIntervalTree(refName) {
        if (!this.intervalTrees[refName]) {
            this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(refName).catch(e => {
                this.intervalTrees[refName] = undefined;
                throw e;
            });
        }
        return this.intervalTrees[refName];
    }
    getFeatures(query, opts = {}) {
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_3__.ObservableCreate)(async (observer) => {
            const { start, end, refName } = query;
            const intervalTree = await this.loadFeatureIntervalTree(refName);
            intervalTree === null || intervalTree === void 0 ? void 0 : intervalTree.search([start, end]).forEach(f => observer.next(f));
            observer.complete();
        }, opts.signal);
    }
    freeResources() { }
}
BedAdapter.capabilities = ['getFeatures', 'getRefNames'];
//# sourceMappingURL=BedAdapter.js.map

/***/ }),

/***/ "?3899":
/*!*****************************!*\
  !*** ./localFile (ignored) ***!
  \*****************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?9a27":
/*!**********************************!*\
  !*** file-uri-to-path (ignored) ***!
  \**********************************/
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-bed_esm_BedAdapter_BedAdapter_js.bundle.js.map