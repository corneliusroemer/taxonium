{"version":3,"file":"node_modules_jbrowse_plugin-wiggle_esm_MultiLinearWiggleDisplay_components_SetMinMaxDialog_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACuE;AACpE;AACO;AAClD,kBAAkB,yDAAU;AAC5B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACc;AACf,YAAY,UAAU;AACtB,YAAY,qBAAqB;AACjC,YAAY,gCAAgC;AAC5C,0BAA0B,+CAAQ,IAAI,8CAA8C;AACpF,0BAA0B,+CAAQ,IAAI,8CAA8C;AACpF;AACA;AACA;AACA;AACA,YAAY,gDAAmB,CAAC,qDAAM,IAAI,kCAAkC;AAC5E,QAAQ,gDAAmB,CAAC,qDAAW;AACvC;AACA,YAAY,gDAAmB,CAAC,qDAAU,IAAI,sDAAsD;AACpG,gBAAgB,gDAAmB,CAAC,iEAAS;AAC7C,QAAQ,gDAAmB,CAAC,qDAAa,IAAI,SAAS,uBAAuB;AAC7E,YAAY,gDAAmB,UAAU,yBAAyB;AAClE,gBAAgB,gDAAmB,CAAC,qDAAU;AAC9C,uBAAuB,gDAAmB,CAAC,qDAAU,IAAI,gBAAgB;AACzE,0BAA0B,gDAAmB,CAAC,qDAAU,IAAI,gBAAgB;AAC5E,gBAAgB,gDAAmB,CAAC,qDAAS,IAAI;AACjD;AACA,qBAAqB,kCAAkC;AACvD,gBAAgB,gDAAmB,CAAC,qDAAS,IAAI;AACjD;AACA,qBAAqB,kCAAkC;AACvD,gBAAgB,gDAAmB,CAAC,qDAAM,IAAI,iEAAiE,gBAAgB;AAC/H;AACA;AACA;AACA,uBAAuB;AACvB;AACA","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/SetMinMaxDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton, TextField, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport CloseIcon from '@mui/icons-material/Close';\nconst useStyles = makeStyles()(theme => ({\n    root: {},\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}));\nexport default function SetMinMaxDlg(props) {\n    const { classes } = useStyles();\n    const { model, handleClose } = props;\n    const { minScore, maxScore, scaleType } = model;\n    const [min, setMin] = useState(`${minScore !== Number.MIN_VALUE ? minScore : ''}`);\n    const [max, setMax] = useState(`${maxScore !== Number.MAX_VALUE ? maxScore : ''}`);\n    const ok = min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max)\n        ? +max > +min\n        : true;\n    const logOk = scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true;\n    return (React.createElement(Dialog, { open: true, onClose: handleClose },\n        React.createElement(DialogTitle, null,\n            \"Set min/max score for track\",\n            React.createElement(IconButton, { className: classes.closeButton, onClick: handleClose },\n                React.createElement(CloseIcon, null))),\n        React.createElement(DialogContent, { style: { overflowX: 'hidden' } },\n            React.createElement(\"div\", { className: classes.root },\n                React.createElement(Typography, null, \"Enter min/max score: \"),\n                !ok ? (React.createElement(Typography, { color: \"error\" }, \"Max is greater than or equal to min\")) : null,\n                !logOk ? (React.createElement(Typography, { color: \"error\" }, \"Min score should be greater than 0 for log scale\")) : null,\n                React.createElement(TextField, { value: min, onChange: event => {\n                        setMin(event.target.value);\n                    }, placeholder: \"Enter min score\" }),\n                React.createElement(TextField, { value: max, onChange: event => {\n                        setMax(event.target.value);\n                    }, placeholder: \"Enter max score\" }),\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", style: { marginLeft: 20 }, disabled: !ok, onClick: () => {\n                        model.setMinScore(min !== '' && !Number.isNaN(+min) ? +min : undefined);\n                        model.setMaxScore(max !== '' && !Number.isNaN(+max) ? +max : undefined);\n                        handleClose();\n                    } }, \"Submit\")))));\n}\n//# sourceMappingURL=SetMinMaxDialog.js.map"],"names":[],"sourceRoot":""}