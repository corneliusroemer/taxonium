{"version":3,"file":"node_modules_jbrowse_plugin-alignments_esm_LinearPileupDisplay_components_ColorByModifications_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA0B;AACY;AAC+F;AAC1F;AACO;AAClD,kBAAkB,yDAAU;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,6BAA6B,gBAAgB;AAC7C,YAAY,UAAU;AACtB,YAAY,gDAAmB,YAAY,0BAA0B;AACrE,QAAQ,gDAAmB,qDAAqD,gDAAmB,SAAS,UAAU;AACtH,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,SAAS;AACxC;AACA;AACA,mBAAmB;AACnB;AACA;AACA,YAAY,UAAU;AACtB,YAAY,qBAAqB;AACjC,YAAY,8BAA8B;AAC1C;AACA,YAAY,gDAAmB,CAAC,qDAAM,IAAI,kCAAkC;AAC5E,QAAQ,gDAAmB,CAAC,qDAAW;AACvC;AACA,YAAY,gDAAmB,CAAC,qDAAU,IAAI,6EAA6E;AAC3H,gBAAgB,gDAAmB,CAAC,iEAAS;AAC7C,QAAQ,gDAAmB,CAAC,qDAAa;AACzC,YAAY,gDAAmB,CAAC,qDAAU;AAC1C,YAAY,gDAAmB,CAAC,qDAAU;AAC1C,YAAY,gDAAmB,UAAU,SAAS,cAAc;AAChE,wGAAwG,gDAAmB,sCAAsC,gDAAmB,CAAC,2CAAc;AACnM;AACA,oBAAoB,gDAAmB,sBAAsB,kDAAkD,OAAO,gDAAmB;AACzI,oBAAoB,gDAAmB,CAAC,qDAAU;AAClD,oBAAoB,gDAAmB,CAAC,qDAAgB,IAAI,UAAU;AACtE,sGAAsG,gDAAmB,sBAAsB;AAC/I;AACA;AACA,uBAAuB;AACvB,YAAY,gDAAmB,CAAC,qDAAa;AAC7C,gBAAgB,gDAAmB,CAAC,sDAAM,IAAI,iDAAiD,WAAW;AAC1G;AACA;AACA,yBAAyB;AACzB;AACA,uBAAuB;AACvB,gBAAgB,gDAAmB,CAAC,sDAAM,IAAI,iDAAiD,WAAW;AAC1G;AACA;AACA,yBAAyB;AACzB;AACA,uBAAuB;AACvB,gBAAgB,gDAAmB,CAAC,sDAAM,IAAI,mDAAmD,WAAW,gCAAgC;AAC5I;AACA,+DAAe,qDAAQ,eAAe,EAAC;AACvC","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ColorByModifications.js"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport CloseIcon from '@mui/icons-material/Close';\nconst useStyles = makeStyles()(theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    table: {\n        border: '1px solid #888',\n        margin: theme.spacing(4),\n        '& td': {\n            padding: theme.spacing(1),\n        },\n    },\n}));\nfunction ModificationTable({ modifications, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"table\", { className: classes.table },\n        React.createElement(\"tbody\", null, modifications.map(([key, value]) => (React.createElement(\"tr\", { key: key },\n            React.createElement(\"td\", null, key),\n            React.createElement(\"td\", null, value),\n            React.createElement(\"td\", { style: {\n                    width: '1em',\n                    background: value,\n                } })))))));\n}\nfunction ColorByTagDlg(props) {\n    const { classes } = useStyles();\n    const { model, handleClose } = props;\n    const { colorBy, modificationTagMap } = model;\n    const modifications = [...modificationTagMap.entries()];\n    return (React.createElement(Dialog, { open: true, onClose: handleClose },\n        React.createElement(DialogTitle, null,\n            \"Color by modifications\",\n            React.createElement(IconButton, { \"aria-label\": \"close\", className: classes.closeButton, onClick: handleClose },\n                React.createElement(CloseIcon, null))),\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG.\"),\n            React.createElement(Typography, null, \"Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode\"),\n            React.createElement(\"div\", { style: { margin: 20 } },\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (React.createElement(\"div\", null, modifications.length ? (React.createElement(React.Fragment, null,\n                    \"Current modification-type-to-color mapping\",\n                    React.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (React.createElement(\"div\", null,\n                    React.createElement(Typography, null, \"Note: color by modifications is already enabled. Loading current modifications...\"),\n                    React.createElement(CircularProgress, { size: 15 }))))) : null,\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (React.createElement(ModificationTable, { modifications: [\n                        ['methylated', 'red'],\n                        ['unmethylated', 'blue'],\n                    ] })) : null),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", style: { margin: 5 }, onClick: () => {\n                        model.setColorScheme({\n                            type: 'modifications',\n                        });\n                        handleClose();\n                    } }, \"Modifications\"),\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", style: { margin: 5 }, onClick: () => {\n                        model.setColorScheme({\n                            type: 'methylation',\n                        });\n                        handleClose();\n                    } }, \"Methylation\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", style: { margin: 5 }, onClick: () => handleClose() }, \"Cancel\")))));\n}\nexport default observer(ColorByTagDlg);\n//# sourceMappingURL=ColorByModifications.js.map"],"names":[],"sourceRoot":""}