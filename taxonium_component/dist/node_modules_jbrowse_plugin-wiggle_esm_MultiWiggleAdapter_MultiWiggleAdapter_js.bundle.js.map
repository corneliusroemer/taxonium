{"version":3,"file":"node_modules_jbrowse_plugin-wiggle_esm_MultiWiggleAdapter_MultiWiggleAdapter_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAkF;AACvB;AACR;AACtB;AACQ;AACrC;AACA;AACA;AACA;AACe,iCAAiC,2FAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY,6GAA6G;AACvJ;AACA;AACA,iBAAiB;AACjB;AACA,iCAAiC;AACjC,eAAe,yEAAgB;AAC/B;AACA,YAAY,2CAAK,uEAAuE,mDAAG;AAC3F;AACA;AACA;AACA,sBAAsB,6DAAa;AACnC;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAdapter/MultiWiggleAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { SimpleFeature } from '@jbrowse/core/util';\nimport { merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nfunction getFilename(uri) {\n    const filename = uri.slice(uri.lastIndexOf('/') + 1);\n    return filename.slice(0, filename.lastIndexOf('.'));\n}\nexport default class MultiWiggleAdapter extends BaseFeatureDataAdapter {\n    async getAdapters() {\n        const getSubAdapter = this.getSubAdapter;\n        if (!getSubAdapter) {\n            throw new Error('no getSubAdapter available');\n        }\n        let subConfs = this.getConf('subadapters');\n        if (!(subConfs === null || subConfs === void 0 ? void 0 : subConfs.length)) {\n            const entries = this.getConf('bigWigs');\n            subConfs = entries.map(entry => ({\n                type: 'BigWigAdapter',\n                source: getFilename(entry),\n                bigWigLocation: {\n                    uri: entry,\n                },\n            }));\n        }\n        return Promise.all(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        subConfs.map(async (conf) => {\n            const dataAdapter = (await getSubAdapter(conf))\n                .dataAdapter;\n            return {\n                source: dataAdapter.id,\n                ...conf,\n                dataAdapter,\n            };\n        }));\n    }\n    // note: can't really have dis-agreeing refNames\n    async getRefNames(opts) {\n        const adapters = await this.getAdapters();\n        return adapters[0].dataAdapter.getRefNames(opts);\n    }\n    async getGlobalStats(opts) {\n        const adapters = await this.getAdapters();\n        const stats = (await Promise.all(\n        // @ts-ignore\n        adapters.map(adp => { var _a, _b; return (_b = (_a = adp.dataAdapter).getGlobalStats) === null || _b === void 0 ? void 0 : _b.call(_a, opts); }))).filter(f => !!f);\n        const scoreMin = Math.min(...stats.map(s => s.scoreMin));\n        const scoreMax = Math.max(...stats.map(s => s.scoreMax));\n        return { scoreMin, scoreMax };\n    }\n    getFeatures(region, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const adapters = await this.getAdapters();\n            merge(...adapters.map(adp => adp.dataAdapter.getFeatures(region, opts).pipe(map(p => \n            // add source field if it does not exist\n            p.get('source')\n                ? p\n                : new SimpleFeature({\n                    ...p.toJSON(),\n                    uniqueId: adp.source + '-' + p.id(),\n                    source: adp.source,\n                }))))).subscribe(observer);\n        }, opts.signal);\n    }\n    // always render bigwig instead of calculating a feature density for it\n    async estimateRegionsStats(_regions) {\n        return { featureDensity: 0 };\n    }\n    // in another adapter type, this could be dynamic depending on region or\n    // something, but it is static for this particular multi-wiggle adapter type\n    async getSources() {\n        const adapters = await this.getAdapters();\n        return adapters.map(({ dataAdapter, source, ...rest }) => ({\n            name: source,\n            ...rest,\n        }));\n    }\n    freeResources() { }\n}\nMultiWiggleAdapter.capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n];\n//# sourceMappingURL=MultiWiggleAdapter.js.map"],"names":[],"sourceRoot":""}