{"version":3,"file":"vendors-node_modules_jbrowse_plugin-data-management_esm_AddTrackWidget_components_AddTrackWidget_js.bundle.js","mappings":"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","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/AddTrackWidget.js","webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/ConfirmTrack.js","webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/DefaultAddTrackWorkflow.js","webpack://taxonium/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackSourceSelect.js","webpack://taxonium/./node_modules/@mui/icons-material/Add.js"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { FormControl, FormHelperText, Select, MenuItem } from '@mui/material';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { getEnv } from 'mobx-state-tree';\nimport DefaultAddTrackWorkflow from './DefaultAddTrackWorkflow';\nfunction AddTrackSelector({ model }) {\n    const [val, setVal] = useLocalStorage('trackSelector-choice', 'Default');\n    const { pluginManager } = getEnv(model);\n    const widgets = pluginManager.getElementTypesInGroup('add track workflow');\n    const ComponentMap = {\n        Default: DefaultAddTrackWorkflow,\n        ...Object.fromEntries(widgets.map(w => [w.name, w.ReactComponent])),\n    };\n    // make sure the selected value is in the list\n    const val2 = ComponentMap[val] ? val : 'Default';\n    const Component = ComponentMap[val2];\n    return (React.createElement(React.Fragment, null,\n        React.createElement(FormControl, null,\n            React.createElement(Select, { value: val2, onChange: event => setVal(event.target.value) }, Object.keys(ComponentMap).map(e => (React.createElement(MenuItem, { key: e, value: e }, e)))),\n            React.createElement(FormHelperText, null, \"Type of add track workflow\")),\n        React.createElement(\"br\", null),\n        React.createElement(Component, { model: model })));\n}\nexport default observer(AddTrackSelector);\n//# sourceMappingURL=AddTrackWidget.js.map","import React, { useEffect, useState } from 'react';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { supportedIndexingAdapters, getSession, isElectron, } from '@jbrowse/core/util';\nimport { Card, CardContent, Checkbox, FormControl, FormControlLabel, IconButton, InputLabel, InputAdornment, ListSubheader, Link, List, ListItem, MenuItem, Paper, TextField, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material//Add';\nimport { observer } from 'mobx-react';\nimport { getEnv } from 'mobx-state-tree';\nimport { UNKNOWN } from '@jbrowse/core/util/tracks';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing(1),\n    },\n    spacer: {\n        height: theme.spacing(8),\n    },\n    card: {\n        marginTop: theme.spacing(1),\n    },\n}));\nfunction StatusMessage({ trackAdapter, trackType, }) {\n    var _a;\n    const { classes } = useStyles();\n    return trackAdapter.type === 'SNPCoverageAdapter' ? (React.createElement(Typography, { className: classes.spacing },\n        \"Selected \",\n        React.createElement(\"code\", null, trackType),\n        \". Using adapter\",\n        ' ',\n        React.createElement(\"code\", null, trackAdapter.type),\n        \" with subadapter\",\n        ' ',\n        React.createElement(\"code\", null, (_a = trackAdapter.subadapter) === null || _a === void 0 ? void 0 : _a.type),\n        \". Please enter a track name and, if necessary, update the track type.\")) : (React.createElement(Typography, { className: classes.spacing },\n        \"Using adapter \",\n        React.createElement(\"code\", null, trackAdapter.type),\n        \" and guessing track type\",\n        ' ',\n        React.createElement(\"code\", null, trackType),\n        \". Please enter a track name and, if necessary, update the track type.\"));\n}\n/**\n * categorizeAdapters takes a list of adapters and sorts their menu item elements under an appropriate ListSubheader\n *  element. In this way, adapters that are from external plugins can have headers that differentiate them from the\n *  out-of-the-box plugins.\n * @param adaptersList - a list of adapters found in the PluginManager\n * @returns a series of JSX elements that are ListSubheaders followed by the adapters\n *   found under that subheader\n */\nfunction categorizeAdapters(adaptersList) {\n    let currentCategory = '';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const items = [];\n    adaptersList.forEach(adapter => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if ((_a = adapter.adapterMetadata) === null || _a === void 0 ? void 0 : _a.category) {\n            if (currentCategory !== ((_b = adapter.adapterMetadata) === null || _b === void 0 ? void 0 : _b.category)) {\n                currentCategory = (_c = adapter.adapterMetadata) === null || _c === void 0 ? void 0 : _c.category;\n                items.push(React.createElement(ListSubheader, { key: (_d = adapter.adapterMetadata) === null || _d === void 0 ? void 0 : _d.category, value: (_e = adapter.adapterMetadata) === null || _e === void 0 ? void 0 : _e.category }, (_f = adapter.adapterMetadata) === null || _f === void 0 ? void 0 : _f.category));\n            }\n            items.push(React.createElement(MenuItem, { key: adapter.name, value: adapter.name }, ((_g = adapter.adapterMetadata) === null || _g === void 0 ? void 0 : _g.displayName)\n                ? (_h = adapter.adapterMetadata) === null || _h === void 0 ? void 0 : _h.displayName\n                : adapter.name));\n        }\n    });\n    return items;\n}\nfunction getAdapterTypes(pluginManager) {\n    return pluginManager.getElementTypesInGroup('adapter');\n}\nfunction getTrackTypes(pluginManager) {\n    return pluginManager.getElementTypesInGroup('track');\n}\nconst TextIndexingConfig = observer(({ model }) => {\n    const { classes } = useStyles();\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n    const [attributes, setAttributes] = useState(['Name', 'ID']);\n    const [exclude, setExclude] = useState(['CDS', 'exon']);\n    const sections = [\n        {\n            label: 'Indexing attributes',\n            values: attributes,\n        },\n        {\n            label: 'Feature types to exclude',\n            values: exclude,\n        },\n    ];\n    useEffect(() => {\n        model.setTextIndexingConf({ attributes, exclude });\n    }, [model, attributes, exclude]);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(InputLabel, null, \"Indexing configuration\"),\n        sections.map((section, index) => (React.createElement(Card, { raised: true, key: section.label, className: classes.card },\n            React.createElement(CardContent, null,\n                React.createElement(InputLabel, null, section.label),\n                React.createElement(List, { disablePadding: true },\n                    section.values.map((val, idx) => (React.createElement(ListItem, { key: idx, disableGutters: true },\n                        React.createElement(TextField, { value: val, InputProps: {\n                                endAdornment: (React.createElement(InputAdornment, { position: \"end\" },\n                                    React.createElement(IconButton, { color: \"secondary\", onClick: () => {\n                                            const newAttr = section.values.filter((a, i) => {\n                                                return i !== idx;\n                                            });\n                                            index === 0\n                                                ? setAttributes(newAttr)\n                                                : setExclude(newAttr);\n                                        } },\n                                        React.createElement(DeleteIcon, null)))),\n                            } })))),\n                    React.createElement(ListItem, { disableGutters: true },\n                        React.createElement(TextField, { value: index === 0 ? value1 : value2, placeholder: \"add new\", onChange: event => {\n                                index === 0\n                                    ? setValue1(event.target.value)\n                                    : setValue2(event.target.value);\n                            }, InputProps: {\n                                endAdornment: (React.createElement(InputAdornment, { position: \"end\" },\n                                    React.createElement(IconButton, { onClick: () => {\n                                            if (index === 0) {\n                                                const newAttr = attributes;\n                                                newAttr.push(value1);\n                                                setAttributes(newAttr);\n                                                setValue1('');\n                                            }\n                                            else {\n                                                const newFeat = exclude;\n                                                newFeat.push(value2);\n                                                setExclude(newFeat);\n                                                setValue2('');\n                                            }\n                                        }, disabled: index === 0 ? value1 === '' : value2 === '', color: \"secondary\", \"data-testid\": `stringArrayAdd-Feat` },\n                                        React.createElement(AddIcon, null)))),\n                            } })))))))));\n});\nconst TrackAdapterSelector = observer(({ model }) => {\n    const { classes } = useStyles();\n    const { trackAdapter } = model;\n    const { pluginManager } = getEnv(model);\n    const adapters = getAdapterTypes(pluginManager);\n    return (React.createElement(TextField, { className: classes.spacing, value: (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) !== 'UNKNOWN' ? trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type : '', label: \"adapterType\", helperText: \"Select an adapter type\", select: true, fullWidth: true, onChange: event => model.setAdapterHint(event.target.value), SelectProps: {\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n        } },\n        adapters\n            // Excludes any adapter with the 'adapterMetadata.hiddenFromGUI' property, and anything with the 'adapterMetadata.category' property\n            .filter(elt => {\n            var _a, _b;\n            return !((_a = elt.adapterMetadata) === null || _a === void 0 ? void 0 : _a.hiddenFromGUI) &&\n                !((_b = elt.adapterMetadata) === null || _b === void 0 ? void 0 : _b.category);\n        })\n            .map(elt => {\n            var _a, _b;\n            return (React.createElement(MenuItem, { key: elt.name, value: elt.name }, ((_a = elt.adapterMetadata) === null || _a === void 0 ? void 0 : _a.displayName)\n                ? (_b = elt.adapterMetadata) === null || _b === void 0 ? void 0 : _b.displayName\n                : elt.name));\n        }),\n        // adapters with the 'adapterMetadata.category' property are categorized\n        // by the value of the property here\n        categorizeAdapters(adapters.filter(elt => { var _a; return !((_a = elt.adapterMetadata) === null || _a === void 0 ? void 0 : _a.hiddenFromGUI); }))));\n});\nfunction UnknownAdapterPrompt({ model }) {\n    const { classes } = useStyles();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Typography, { className: classes.spacing },\n            \"JBrowse was not able to guess the adapter type for this data, but it may be in the list below. If not, you can\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"check for new releases\"),\n            ' ',\n            \"of JBrowse to see if they support this data type or\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"file an issue\"),\n            ' ',\n            \"and add a feature request for this data type.\"),\n        React.createElement(TrackAdapterSelector, { model: model })));\n}\nconst TrackTypeSelector = observer(({ model }) => {\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { trackType } = model;\n    const trackTypes = getTrackTypes(getEnv(session).pluginManager);\n    return (React.createElement(TextField, { className: classes.spacing, value: trackType, label: \"trackType\", helperText: \"Select a track type\", select: true, fullWidth: true, onChange: event => {\n            model.setTrackType(event.target.value);\n        }, SelectProps: {\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n        } }, trackTypes.map(({ name }) => (React.createElement(MenuItem, { key: name, value: name }, name)))));\n});\nconst TrackAssemblySelector = observer(({ model }) => {\n    const session = getSession(model);\n    const { assembly } = model;\n    return (React.createElement(TextField, { value: assembly, label: \"assemblyName\", helperText: \"Assembly to which the track will be added\", select: true, fullWidth: true, onChange: event => model.setAssembly(event.target.value), SelectProps: {\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        } }, session.assemblies\n        .map(conf => readConfObject(conf, 'name'))\n        .map(name => (React.createElement(MenuItem, { key: name, value: name }, name)))));\n});\nfunction ConfirmTrack({ model }) {\n    const { classes } = useStyles();\n    const [check, setCheck] = useState(true);\n    const { trackName, trackAdapter, trackType, warningMessage, adapterHint } = model;\n    if (model.unsupported) {\n        return (React.createElement(Typography, { className: classes.spacing },\n            \"This version of JBrowse cannot display data of this type. It is possible, however, that there is a newer version that can display them. You can\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"check for new releases\"),\n            ' ',\n            \"of JBrowse or\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"file an issue\"),\n            ' ',\n            \"and add a feature request for this data type.\"));\n    }\n    if ((trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) === UNKNOWN) {\n        return React.createElement(UnknownAdapterPrompt, { model: model });\n    }\n    if (adapterHint === '' && trackAdapter) {\n        model.setAdapterHint(trackAdapter.type);\n    }\n    if (!(trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type)) {\n        return React.createElement(Typography, null, \"Could not recognize this data type.\");\n    }\n    const supportedForIndexing = supportedIndexingAdapters(trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type);\n    return (React.createElement(\"div\", null,\n        trackAdapter ? (React.createElement(StatusMessage, { trackAdapter: trackAdapter, trackType: trackType })) : null,\n        warningMessage ? (React.createElement(Typography, { style: { color: 'orange' } }, warningMessage)) : null,\n        React.createElement(TextField, { className: classes.spacing, label: \"trackName\", helperText: \"A name for this track\", fullWidth: true, value: trackName, onChange: event => model.setTrackName(event.target.value), inputProps: { 'data-testid': 'trackNameInput' } }),\n        React.createElement(TrackAdapterSelector, { model: model }),\n        React.createElement(TrackTypeSelector, { model: model }),\n        React.createElement(TrackAssemblySelector, { model: model }),\n        isElectron && supportedForIndexing && (React.createElement(FormControl, null,\n            React.createElement(FormControlLabel, { label: 'Index track for text searching?', control: React.createElement(Checkbox, { checked: check, onChange: e => {\n                        setCheck(e.target.checked);\n                        model.setTextIndexTrack(e.target.checked);\n                    } }) }))),\n        isElectron && check && supportedForIndexing ? (React.createElement(TextIndexingConfig, { model: model })) : null));\n}\nexport default observer(ConfirmTrack);\n//# sourceMappingURL=ConfirmTrack.js.map","import React, { useState } from 'react';\nimport { Alert, Button, Step, StepContent, StepLabel, Stepper, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { getSession, isElectron, supportedIndexingAdapters, } from '@jbrowse/core/util';\nimport { getConf } from '@jbrowse/core/configuration';\nimport { observer } from 'mobx-react';\nimport { getEnv } from 'mobx-state-tree';\n// locals\nimport ConfirmTrack from './ConfirmTrack';\nimport TrackSourceSelect from './TrackSourceSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    stepContent: {\n        margin: theme.spacing(1),\n    },\n    alertContainer: {\n        padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n    },\n}));\nconst steps = ['Enter track data', 'Confirm track type'];\nfunction AddTrackWorkflow({ model }) {\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const { pluginManager } = getEnv(model);\n    const { rootModel } = pluginManager;\n    const { jobsManager } = rootModel;\n    const session = getSession(model);\n    const { assembly, trackAdapter, trackData, trackName, trackType, textIndexTrack, textIndexingConf, } = model;\n    const [trackErrorMessage, setTrackErrorMessage] = useState();\n    function getStepContent(step) {\n        switch (step) {\n            case 0:\n                return React.createElement(TrackSourceSelect, { model: model });\n            case 1:\n                return React.createElement(ConfirmTrack, { model: model });\n            default:\n                return React.createElement(Typography, null, \"Unknown step\");\n        }\n    }\n    async function handleNext() {\n        if (activeStep !== steps.length - 1) {\n            setActiveStep(activeStep + 1);\n            return;\n        }\n        const trackId = [\n            `${trackName.toLowerCase().replace(/ /g, '_')}-${Date.now()}`,\n            `${session.adminMode ? '' : '-sessionTrack'}`,\n        ].join('');\n        const assemblyInstance = session.assemblyManager.get(assembly);\n        if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n            session.addTrackConf({\n                trackId,\n                type: trackType,\n                name: trackName,\n                assemblyNames: [assembly],\n                adapter: {\n                    ...trackAdapter,\n                    sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n                },\n            });\n            if (model.view) {\n                model.view.showTrack(trackId);\n                if (isElectron &&\n                    textIndexTrack &&\n                    supportedIndexingAdapters(trackAdapter.type)) {\n                    const attr = textIndexingConf || {\n                        attributes: ['Name', 'ID'],\n                        exclude: ['CDS', 'exon'],\n                    };\n                    const indexName = trackName + '-index';\n                    const newEntry = {\n                        indexingParams: {\n                            ...attr,\n                            assemblies: [assembly],\n                            tracks: [trackId],\n                            indexType: 'perTrack',\n                            name: indexName,\n                            timestamp: new Date().toISOString(),\n                        },\n                        name: indexName,\n                        cancelCallback: () => jobsManager.abortJob(),\n                    };\n                    jobsManager.queueJob(newEntry);\n                }\n            }\n            else {\n                session.notify('Open a new view, or use the track selector in an existing view, to view this track', 'info');\n            }\n            model.clearData();\n            session.hideWidget(model);\n        }\n        else {\n            setTrackErrorMessage('Failed to add track.\\nThe configuration of this file is not currently supported.');\n        }\n    }\n    function handleBack() {\n        setTrackErrorMessage(undefined);\n        setActiveStep(activeStep - 1);\n    }\n    function isNextDisabled() {\n        switch (activeStep) {\n            case 0:\n                return !trackData;\n            case 1:\n                return !(trackName && trackType && (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) && assembly);\n            default:\n                return true;\n        }\n    }\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\" }, steps.map((label, idx) => (React.createElement(Step, { key: label },\n            React.createElement(StepLabel, null, label),\n            React.createElement(StepContent, null,\n                getStepContent(idx),\n                React.createElement(\"div\", { className: classes.actionsContainer },\n                    React.createElement(Button, { disabled: activeStep === 0, onClick: handleBack, className: classes.button }, \"Back\"),\n                    React.createElement(Button, { disabled: isNextDisabled(), variant: \"contained\", color: \"primary\", onClick: handleNext, className: classes.button, \"data-testid\": \"addTrackNextButton\" }, activeStep === steps.length - 1 ? 'Add' : 'Next')),\n                trackErrorMessage ? (React.createElement(\"div\", { className: classes.alertContainer },\n                    React.createElement(Alert, { severity: \"error\" }, trackErrorMessage))) : null)))))));\n}\nexport default observer(AddTrackWorkflow);\n//# sourceMappingURL=DefaultAddTrackWorkflow.js.map","import React from 'react';\nimport { FileSelector } from '@jbrowse/core/ui';\nimport { Paper } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { getRoot } from 'mobx-state-tree';\nimport { observer } from 'mobx-react';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing(1),\n    },\n    spacer: {\n        height: theme.spacing(8),\n    },\n}));\nfunction TrackSourceSelect({ model }) {\n    const { classes } = useStyles();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const rootModel = getRoot(model);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(FileSelector, { name: \"Main file\", description: \"\", location: model.trackData, setLocation: model.setTrackData, setName: model.setTrackName, rootModel: rootModel }),\n        React.createElement(\"div\", { className: classes.spacer }),\n        React.createElement(FileSelector, { name: \"Index file\", description: \"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\", location: model.indexTrackData, setLocation: model.setIndexTrackData, setName: model.setTrackName, rootModel: rootModel })));\n}\nexport default observer(TrackSourceSelect);\n//# sourceMappingURL=TrackSourceSelect.js.map","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;"],"names":[],"sourceRoot":""}