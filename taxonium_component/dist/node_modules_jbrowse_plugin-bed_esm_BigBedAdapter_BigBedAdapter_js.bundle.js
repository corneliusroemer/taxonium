(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-bed_esm_BigBedAdapter_BigBedAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-bed/esm/BigBedAdapter/BigBedAdapter.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-bed/esm/BigBedAdapter/BigBedAdapter.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ BigBedAdapter; }
/* harmony export */ });
/* harmony import */ var _gmod_bbi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gmod/bbi */ "./node_modules/@gmod/bbi/esm/index.js");
/* harmony import */ var _gmod_bed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gmod/bed */ "./node_modules/@gmod/bed/esm/index.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jbrowse/core/util/io */ "./node_modules/@jbrowse/core/util/io/index.js");
/* harmony import */ var _jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jbrowse/core/util/rxjs */ "./node_modules/@jbrowse/core/util/rxjs.js");
/* harmony import */ var _jbrowse_core_util_simpleFeature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jbrowse/core/util/simpleFeature */ "./node_modules/@jbrowse/core/util/simpleFeature.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jbrowse/core/configuration */ "./node_modules/@jbrowse/core/configuration/index.js");
/* harmony import */ var _jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util */ "./node_modules/@jbrowse/plugin-bed/esm/util.js");
/* eslint-disable @typescript-eslint/no-explicit-any */









function isUCSC(f) {
    return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0;
}
class BigBedAdapter extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_2__.BaseFeatureDataAdapter {
    async configurePre(opts) {
        const bigbed = new _gmod_bbi__WEBPACK_IMPORTED_MODULE_0__.BigBed({
            filehandle: (0,_jbrowse_core_util_io__WEBPACK_IMPORTED_MODULE_3__.openLocation)((0,_jbrowse_core_configuration__WEBPACK_IMPORTED_MODULE_6__.readConfObject)(this.config, 'bigBedLocation'), this.pluginManager),
        });
        const header = await bigbed.getHeader(opts);
        const parser = new _gmod_bed__WEBPACK_IMPORTED_MODULE_1__["default"]({ autoSql: header.autoSql });
        return { bigbed, header, parser };
    }
    async configure(opts) {
        if (!this.cached) {
            this.cached = this.configurePre(opts).catch(e => {
                this.cached = undefined;
                throw e;
            });
        }
        return this.cached;
    }
    async getRefNames(opts) {
        const { header } = await this.configure(opts);
        return Object.keys(header.refsByName);
    }
    async getHeader(opts) {
        const { parser, header } = await this.configure(opts);
        const { version, fileType } = header;
        const { fields, ...rest } = parser.autoSql;
        return {
            version,
            fileType,
            autoSql: { ...rest },
            fields: Object.fromEntries(fields.map(({ name, comment }) => [name, comment])),
        };
    }
    getFeatures(region, opts = {}) {
        const { refName, start, end } = region;
        const { signal } = opts;
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_4__.ObservableCreate)(async (observer) => {
            try {
                const { parser, bigbed } = await this.configure(opts);
                const ob = await bigbed.getFeatureStream(refName, start, end, {
                    signal,
                    basesPerSpan: end - start,
                });
                ob.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.mergeAll)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(r => {
                    const data = parser.parseLine(`${refName}\t${r.start}\t${r.end}\t${r.rest}`, {
                        uniqueId: r.uniqueId,
                    });
                    const { blockCount, blockSizes, blockStarts, chromStarts } = data;
                    if (blockCount) {
                        const starts = chromStarts || blockStarts || [];
                        const sizes = blockSizes;
                        const blocksOffset = r.start;
                        data.subfeatures = [];
                        for (let b = 0; b < blockCount; b += 1) {
                            const bmin = (starts[b] || 0) + blocksOffset;
                            const bmax = bmin + (sizes[b] || 0);
                            data.subfeatures.push({
                                uniqueId: `${r.uniqueId}-${b}`,
                                start: bmin,
                                end: bmax,
                                type: 'block',
                            });
                        }
                    }
                    if (r.uniqueId === undefined) {
                        throw new Error('invalid bbi feature');
                    }
                    const { chromStart, chromEnd, chrom, ...rest } = data;
                    const f = new _jbrowse_core_util_simpleFeature__WEBPACK_IMPORTED_MODULE_5__["default"]({
                        id: `${this.id}-${r.uniqueId}`,
                        data: {
                            ...rest,
                            start: r.start,
                            end: r.end,
                            refName,
                        },
                    });
                    // collection of heuristics for suggesting that this feature
                    // should be converted to a gene, CNV bigbed has many gene like
                    // features including thickStart and blockCount but no strand
                    return isUCSC(f) ? (0,_util__WEBPACK_IMPORTED_MODULE_7__.ucscProcessedTranscript)(f) : f;
                })).subscribe(observer);
            }
            catch (e) {
                observer.error(e);
            }
        }, opts.signal);
    }
    freeResources() { }
}
//# sourceMappingURL=BigBedAdapter.js.map

/***/ }),

/***/ "?f1ee":
/*!*****************************!*\
  !*** ./localFile (ignored) ***!
  \*****************************/
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-bed_esm_BigBedAdapter_BigBedAdapter_js.bundle.js.map