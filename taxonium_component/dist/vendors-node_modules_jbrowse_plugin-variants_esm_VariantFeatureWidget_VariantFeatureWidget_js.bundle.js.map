{"version":3,"file":"vendors-node_modules_jbrowse_plugin-variants_esm_VariantFeatureWidget_VariantFeatureWidget_js.bundle.js","mappings":"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","sources":["webpack://taxonium/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/BreakendOptionDialog.js","webpack://taxonium/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantFeatureWidget.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, Divider, FormControlLabel, IconButton, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { getSession } from '@jbrowse/core/util';\nconst useStyles = makeStyles()(theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    block: {\n        display: 'block',\n    },\n}));\nfunction BreakendOptionDialog({ model, handleClose, feature, viewType, }) {\n    const { classes } = useStyles();\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [mirrorTracks, setMirrorTracks] = useState(true);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose },\n        React.createElement(DialogTitle, null,\n            \"Breakpoint split view options\",\n            handleClose ? (React.createElement(IconButton, { className: classes.closeButton, onClick: () => handleClose() },\n                React.createElement(CloseIcon, null))) : null),\n        React.createElement(Divider, null),\n        React.createElement(DialogContent, null,\n            React.createElement(FormControlLabel, { className: classes.block, control: React.createElement(Checkbox, { checked: copyTracks, onChange: () => setCopyTracks(val => !val) }), label: \"Copy tracks into the new view\" }),\n            React.createElement(FormControlLabel, { className: classes.block, control: React.createElement(Checkbox, { checked: mirrorTracks, onChange: () => setMirrorTracks(val => !val) }), label: \"Mirror tracks vertically in vertically stacked view\" })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    const { view } = model;\n                    const session = getSession(model);\n                    try {\n                        const viewSnapshot = viewType.snapshotFromBreakendFeature(feature, view);\n                        viewSnapshot.views[0].offsetPx -= view.width / 2 + 100;\n                        viewSnapshot.views[1].offsetPx -= view.width / 2 + 100;\n                        viewSnapshot.featureData = feature;\n                        const viewTracks = getSnapshot(view.tracks);\n                        viewSnapshot.views[0].tracks = viewTracks;\n                        viewSnapshot.views[1].tracks = mirrorTracks\n                            ? viewTracks.slice().reverse()\n                            : viewTracks;\n                        session.addView('BreakpointSplitView', viewSnapshot);\n                    }\n                    catch (e) {\n                        console.error(e);\n                        session.notify(`${e}`);\n                    }\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { onClick: () => handleClose(), color: \"secondary\", variant: \"contained\" }, \"Cancel\"))));\n}\nexport default observer(BreakendOptionDialog);\n//# sourceMappingURL=BreakendOptionDialog.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react';\nimport { Divider, Link, Paper, FormControlLabel, Checkbox, TextField, Typography, } from '@mui/material';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { observer } from 'mobx-react';\nimport { getSession } from '@jbrowse/core/util';\nimport { getEnv } from 'mobx-state-tree';\nimport { FeatureDetails, BaseCard, } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';\nimport BreakendOptionDialog from './BreakendOptionDialog';\nimport { parseBreakend } from '@gmod/vcf';\nfunction VariantSamples(props) {\n    const [filter, setFilter] = useState({});\n    const [showFilters, setShowFilters] = useState(false);\n    const { feature } = props;\n    const { samples = {} } = feature;\n    const preFilteredRows = Object.entries(samples);\n    if (!preFilteredRows.length) {\n        return null;\n    }\n    const infoFields = ['sample', ...Object.keys(preFilteredRows[0][1])].map(field => ({\n        field,\n    }));\n    let error;\n    let rows = [];\n    const filters = Object.keys(filter);\n    // catch some error thrown from regex\n    // note: maps all values into a string, if this is not done rows are not\n    // sortable by the data-grid\n    try {\n        rows = preFilteredRows\n            .map((row) => ({\n            ...Object.fromEntries(Object.entries(row[1]).map(entry => [entry[0], String(entry[1])])),\n            sample: row[0],\n            id: row[0],\n        }))\n            .filter((row) => {\n            return filters.length\n                ? filters.every(key => {\n                    const val = row[key];\n                    const currFilter = filter[key];\n                    return currFilter ? val.match(new RegExp(currFilter, 'i')) : true;\n                })\n                : true;\n        });\n    }\n    catch (e) {\n        error = e;\n    }\n    // disableSelectionOnClick helps avoid\n    // https://github.com/mui-org/material-ui-x/issues/1197\n    return (React.createElement(BaseCard, { ...props, title: \"Samples\" },\n        error ? React.createElement(Typography, { color: \"error\" }, `${error}`) : null,\n        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: showFilters, onChange: () => setShowFilters(f => !f) }), label: \"Show sample filters\" }),\n        showFilters ? (React.createElement(React.Fragment, null,\n            React.createElement(Typography, null, \"These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\\\d* will find any non-zero allele e.g. 0|2 or 2/33\"),\n            infoFields.map(({ field }) => {\n                return (React.createElement(TextField, { key: `filter-${field}`, placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => setFilter({ ...filter, [field]: event.target.value }) }));\n            }))) : null,\n        React.createElement(\"div\", { style: { height: 600, width: '100%', overflow: 'auto' } },\n            React.createElement(DataGrid, { rows: rows, columns: infoFields, disableSelectionOnClick: true, rowHeight: 25, disableColumnMenu: true }))));\n}\nfunction BreakendPanel(props) {\n    const { model, locStrings, feature } = props;\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const [breakpointDialog, setBreakpointDialog] = useState(false);\n    let viewType;\n    try {\n        viewType = pluginManager.getViewType('BreakpointSplitView');\n    }\n    catch (e) {\n        // ignore\n    }\n    const simpleFeature = new SimpleFeature(feature);\n    return (React.createElement(BaseCard, { ...props, title: \"Breakends\" },\n        React.createElement(Typography, null, \"Link to linear view of breakend endpoints\"),\n        React.createElement(\"ul\", null, locStrings.map(locString => (React.createElement(\"li\", { key: `${JSON.stringify(locString)}` },\n            React.createElement(Link, { href: \"#\", onClick: event => {\n                    var _a;\n                    event.preventDefault();\n                    const { view } = model;\n                    try {\n                        if (view) {\n                            (_a = view.navToLocString) === null || _a === void 0 ? void 0 : _a.call(view, locString);\n                        }\n                        else {\n                            throw new Error('No view associated with this feature detail panel anymore');\n                        }\n                    }\n                    catch (e) {\n                        console.error(e);\n                        session.notify(`${e}`);\n                    }\n                } }, `LGV - ${locString}`))))),\n        viewType ? (React.createElement(\"div\", null,\n            React.createElement(Typography, null, \"Launch split views with breakend source and target\"),\n            React.createElement(\"ul\", null, locStrings.map(locString => (React.createElement(\"li\", { key: `${JSON.stringify(locString)}` },\n                React.createElement(Link, { href: \"#\", onClick: event => {\n                        event.preventDefault();\n                        setBreakpointDialog(true);\n                    } }, `${feature.refName}:${feature.start} // ${locString} (split view)`))))),\n            breakpointDialog ? (React.createElement(BreakendOptionDialog, { model: model, feature: simpleFeature, viewType: viewType, handleClose: () => {\n                    setBreakpointDialog(false);\n                } })) : null)) : null));\n}\nfunction VariantFeatureDetails(props) {\n    const { model } = props;\n    const { featureData, descriptions } = model;\n    const feat = JSON.parse(JSON.stringify(featureData));\n    const { samples, ...rest } = feat;\n    const basicDescriptions = {\n        CHROM: 'chromosome: An identifier from the reference genome',\n        POS: 'position: The reference position, with the 1st base having position 1',\n        ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n        REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n        ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n        QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n        FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n    };\n    return (React.createElement(Paper, { \"data-testid\": \"variant-side-drawer\" },\n        React.createElement(FeatureDetails, { feature: rest, descriptions: { ...basicDescriptions, ...descriptions }, ...props }),\n        React.createElement(Divider, null),\n        feat.type === 'breakend' ? (React.createElement(BreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : null,\n        feat.type === 'translocation' ? (React.createElement(BreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : null,\n        React.createElement(VariantSamples, { feature: feat, ...props })));\n}\nexport default observer(VariantFeatureDetails);\n//# sourceMappingURL=VariantFeatureWidget.js.map"],"names":[],"sourceRoot":""}