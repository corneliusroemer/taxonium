"use strict";
(self["webpackChunktaxonium"] = self["webpackChunktaxonium"] || []).push([["node_modules_jbrowse_plugin-wiggle_esm_MultiWiggleAdapter_MultiWiggleAdapter_js"],{

/***/ "./node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAdapter/MultiWiggleAdapter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAdapter/MultiWiggleAdapter.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ MultiWiggleAdapter; }
/* harmony export */ });
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jbrowse/core/data_adapters/BaseAdapter */ "./node_modules/@jbrowse/core/data_adapters/BaseAdapter.js");
/* harmony import */ var _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jbrowse/core/util/rxjs */ "./node_modules/@jbrowse/core/util/rxjs.js");
/* harmony import */ var _jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jbrowse/core/util */ "./node_modules/@jbrowse/core/util/index.js");
/* harmony import */ var _jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/internal/observable/merge.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/internal/operators/map.js");





function getFilename(uri) {
    const filename = uri.slice(uri.lastIndexOf('/') + 1);
    return filename.slice(0, filename.lastIndexOf('.'));
}
class MultiWiggleAdapter extends _jbrowse_core_data_adapters_BaseAdapter__WEBPACK_IMPORTED_MODULE_0__.BaseFeatureDataAdapter {
    async getAdapters() {
        const getSubAdapter = this.getSubAdapter;
        if (!getSubAdapter) {
            throw new Error('no getSubAdapter available');
        }
        let subConfs = this.getConf('subadapters');
        if (!(subConfs === null || subConfs === void 0 ? void 0 : subConfs.length)) {
            const entries = this.getConf('bigWigs');
            subConfs = entries.map(entry => ({
                type: 'BigWigAdapter',
                source: getFilename(entry),
                bigWigLocation: {
                    uri: entry,
                },
            }));
        }
        return Promise.all(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        subConfs.map(async (conf) => {
            const dataAdapter = (await getSubAdapter(conf))
                .dataAdapter;
            return {
                source: dataAdapter.id,
                ...conf,
                dataAdapter,
            };
        }));
    }
    // note: can't really have dis-agreeing refNames
    async getRefNames(opts) {
        const adapters = await this.getAdapters();
        return adapters[0].dataAdapter.getRefNames(opts);
    }
    async getGlobalStats(opts) {
        const adapters = await this.getAdapters();
        const stats = (await Promise.all(
        // @ts-ignore
        adapters.map(adp => { var _a, _b; return (_b = (_a = adp.dataAdapter).getGlobalStats) === null || _b === void 0 ? void 0 : _b.call(_a, opts); }))).filter(f => !!f);
        const scoreMin = Math.min(...stats.map(s => s.scoreMin));
        const scoreMax = Math.max(...stats.map(s => s.scoreMax));
        return { scoreMin, scoreMax };
    }
    getFeatures(region, opts = {}) {
        return (0,_jbrowse_core_util_rxjs__WEBPACK_IMPORTED_MODULE_1__.ObservableCreate)(async (observer) => {
            const adapters = await this.getAdapters();
            (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.merge)(...adapters.map(adp => adp.dataAdapter.getFeatures(region, opts).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(p => 
            // add source field if it does not exist
            p.get('source')
                ? p
                : new _jbrowse_core_util__WEBPACK_IMPORTED_MODULE_2__.SimpleFeature({
                    ...p.toJSON(),
                    uniqueId: adp.source + '-' + p.id(),
                    source: adp.source,
                }))))).subscribe(observer);
        }, opts.signal);
    }
    // always render bigwig instead of calculating a feature density for it
    async estimateRegionsStats(_regions) {
        return { featureDensity: 0 };
    }
    // in another adapter type, this could be dynamic depending on region or
    // something, but it is static for this particular multi-wiggle adapter type
    async getSources() {
        const adapters = await this.getAdapters();
        return adapters.map(({ dataAdapter, source, ...rest }) => ({
            name: source,
            ...rest,
        }));
    }
    freeResources() { }
}
MultiWiggleAdapter.capabilities = [
    'hasResolution',
    'hasLocalStats',
    'hasGlobalStats',
];
//# sourceMappingURL=MultiWiggleAdapter.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_jbrowse_plugin-wiggle_esm_MultiWiggleAdapter_MultiWiggleAdapter_js.bundle.js.map